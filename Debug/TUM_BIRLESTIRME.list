
TUM_BIRLESTIRME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e5c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005fe4  08005fe4  00006fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ffc  08005ffc  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ffc  08005ffc  00006ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006004  08006004  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006004  08006004  00007004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006008  08006008  00007008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800600c  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008070  2**0
                  CONTENTS
 10 .bss          00000380  20000070  20000070  00008070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003f0  200003f0  00008070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ceb9  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bd4  00000000  00000000  00014f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00016b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000afc  00000000  00000000  00017928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022589  00000000  00000000  00018424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108cb  00000000  00000000  0003a9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d84f6  00000000  00000000  0004b278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012376e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fcc  00000000  00000000  001237b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00127780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005fcc 	.word	0x08005fcc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005fcc 	.word	0x08005fcc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96a 	b.w	8000e2c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	460c      	mov	r4, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14e      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	458c      	cmp	ip, r1
 8000b80:	4686      	mov	lr, r0
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	d962      	bls.n	8000c4e <__udivmoddi4+0xde>
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0320 	rsb	r3, r2, #32
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f f68c 	uxth.w	r6, ip
 8000ba6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000baa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bae:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc6:	f080 8112 	bcs.w	8000dee <__udivmoddi4+0x27e>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 810f 	bls.w	8000dee <__udivmoddi4+0x27e>
 8000bd0:	3c02      	subs	r4, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	fa1f f38e 	uxth.w	r3, lr
 8000bda:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bde:	fb07 1110 	mls	r1, r7, r0, r1
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb00 f606 	mul.w	r6, r0, r6
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf6:	f080 80fc 	bcs.w	8000df2 <__udivmoddi4+0x282>
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	f240 80f9 	bls.w	8000df2 <__udivmoddi4+0x282>
 8000c00:	4463      	add	r3, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xba>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb4>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x150>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xcc>
 8000c36:	4290      	cmp	r0, r2
 8000c38:	f0c0 80f0 	bcc.w	8000e1c <__udivmoddi4+0x2ac>
 8000c3c:	1a86      	subs	r6, r0, r2
 8000c3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0e6      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c48:	e9c5 6300 	strd	r6, r3, [r5]
 8000c4c:	e7e3      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 8090 	bne.w	8000d74 <__udivmoddi4+0x204>
 8000c54:	eba1 040c 	sub.w	r4, r1, ip
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	2101      	movs	r1, #1
 8000c62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb07 f006 	mul.w	r0, r7, r6
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x11c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x11a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 80cd 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c96:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb00 f707 	mul.w	r7, r0, r7
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x148>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x146>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	f200 80b0 	bhi.w	8000e16 <__udivmoddi4+0x2a6>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	1bdb      	subs	r3, r3, r7
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cc0:	f1c1 0620 	rsb	r6, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd0:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd4:	ea43 030c 	orr.w	r3, r3, ip
 8000cd8:	40f4      	lsrs	r4, r6
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	0c38      	lsrs	r0, r7, #16
 8000ce0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cf8:	45a1      	cmp	r9, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x1a6>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d06:	f080 8084 	bcs.w	8000e12 <__udivmoddi4+0x2a2>
 8000d0a:	45a1      	cmp	r9, r4
 8000d0c:	f240 8081 	bls.w	8000e12 <__udivmoddi4+0x2a2>
 8000d10:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	eba4 0409 	sub.w	r4, r4, r9
 8000d1a:	fa1f f983 	uxth.w	r9, r3
 8000d1e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d22:	fb00 4413 	mls	r4, r0, r3, r4
 8000d26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2e:	45a4      	cmp	ip, r4
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x1d2>
 8000d32:	193c      	adds	r4, r7, r4
 8000d34:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d38:	d267      	bcs.n	8000e0a <__udivmoddi4+0x29a>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0x29a>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d46:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4a:	eba4 040c 	sub.w	r4, r4, ip
 8000d4e:	429c      	cmp	r4, r3
 8000d50:	46ce      	mov	lr, r9
 8000d52:	469c      	mov	ip, r3
 8000d54:	d351      	bcc.n	8000dfa <__udivmoddi4+0x28a>
 8000d56:	d04e      	beq.n	8000df6 <__udivmoddi4+0x286>
 8000d58:	b155      	cbz	r5, 8000d70 <__udivmoddi4+0x200>
 8000d5a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d5e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d62:	fa04 f606 	lsl.w	r6, r4, r6
 8000d66:	40cb      	lsrs	r3, r1
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	40cc      	lsrs	r4, r1
 8000d6c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e750      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d74:	f1c2 0320 	rsb	r3, r2, #32
 8000d78:	fa20 f103 	lsr.w	r1, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa24 f303 	lsr.w	r3, r4, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	430c      	orrs	r4, r1
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d90:	fa1f f78c 	uxth.w	r7, ip
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3110 	mls	r1, r8, r0, r3
 8000d9c:	0c23      	lsrs	r3, r4, #16
 8000d9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da2:	fb00 f107 	mul.w	r1, r0, r7
 8000da6:	4299      	cmp	r1, r3
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x24c>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db2:	d22c      	bcs.n	8000e0e <__udivmoddi4+0x29e>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	d92a      	bls.n	8000e0e <__udivmoddi4+0x29e>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb01 f307 	mul.w	r3, r1, r7
 8000dd0:	42a3      	cmp	r3, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x276>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ddc:	d213      	bcs.n	8000e06 <__udivmoddi4+0x296>
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	d911      	bls.n	8000e06 <__udivmoddi4+0x296>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	1ae4      	subs	r4, r4, r3
 8000de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dec:	e739      	b.n	8000c62 <__udivmoddi4+0xf2>
 8000dee:	4604      	mov	r4, r0
 8000df0:	e6f0      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e706      	b.n	8000c04 <__udivmoddi4+0x94>
 8000df6:	45c8      	cmp	r8, r9
 8000df8:	d2ae      	bcs.n	8000d58 <__udivmoddi4+0x1e8>
 8000dfa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dfe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e02:	3801      	subs	r0, #1
 8000e04:	e7a8      	b.n	8000d58 <__udivmoddi4+0x1e8>
 8000e06:	4631      	mov	r1, r6
 8000e08:	e7ed      	b.n	8000de6 <__udivmoddi4+0x276>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	e799      	b.n	8000d42 <__udivmoddi4+0x1d2>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e7d4      	b.n	8000dbc <__udivmoddi4+0x24c>
 8000e12:	46d6      	mov	lr, sl
 8000e14:	e77f      	b.n	8000d16 <__udivmoddi4+0x1a6>
 8000e16:	4463      	add	r3, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e74d      	b.n	8000cb8 <__udivmoddi4+0x148>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	4623      	mov	r3, r4
 8000e20:	4608      	mov	r0, r1
 8000e22:	e70f      	b.n	8000c44 <__udivmoddi4+0xd4>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	e730      	b.n	8000c8c <__udivmoddi4+0x11c>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <MPU6050_1_Write_Byte>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU6050_1_Write_Byte(uint8_t reg, uint8_t data) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	4603      	mov	r3, r0
 8000e38:	460a      	mov	r2, r1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, MPU6050_1_ADDR, reg, 1, &data, 1, 100);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	2364      	movs	r3, #100	@ 0x64
 8000e46:	9302      	str	r3, [sp, #8]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	9301      	str	r3, [sp, #4]
 8000e4c:	1dbb      	adds	r3, r7, #6
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2301      	movs	r3, #1
 8000e52:	21d0      	movs	r1, #208	@ 0xd0
 8000e54:	4803      	ldr	r0, [pc, #12]	@ (8000e64 <MPU6050_1_Write_Byte+0x34>)
 8000e56:	f002 fd91 	bl	800397c <HAL_I2C_Mem_Write>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000170 	.word	0x20000170

08000e68 <apply_filter>:

void apply_filter(float *x, float *y, float *z) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
    filter_buffer[filter_index][0] = *x;
 8000e74:	4b4b      	ldr	r3, [pc, #300]	@ (8000fa4 <apply_filter+0x13c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	494a      	ldr	r1, [pc, #296]	@ (8000fa8 <apply_filter+0x140>)
 8000e80:	4603      	mov	r3, r0
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4403      	add	r3, r0
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	440b      	add	r3, r1
 8000e8a:	601a      	str	r2, [r3, #0]
    filter_buffer[filter_index][1] = *y;
 8000e8c:	4b45      	ldr	r3, [pc, #276]	@ (8000fa4 <apply_filter+0x13c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4944      	ldr	r1, [pc, #272]	@ (8000fa8 <apply_filter+0x140>)
 8000e98:	4603      	mov	r3, r0
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4403      	add	r3, r0
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	601a      	str	r2, [r3, #0]
    filter_buffer[filter_index][2] = *z;
 8000ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa4 <apply_filter+0x13c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	493d      	ldr	r1, [pc, #244]	@ (8000fa8 <apply_filter+0x140>)
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4403      	add	r3, r0
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	440b      	add	r3, r1
 8000ebc:	3308      	adds	r3, #8
 8000ebe:	601a      	str	r2, [r3, #0]
    filter_index = (filter_index + 1) % FILTER_SAMPLES;
 8000ec0:	4b38      	ldr	r3, [pc, #224]	@ (8000fa4 <apply_filter+0x13c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	4b39      	ldr	r3, [pc, #228]	@ (8000fac <apply_filter+0x144>)
 8000ec8:	fb83 1302 	smull	r1, r3, r3, r2
 8000ecc:	1059      	asrs	r1, r3, #1
 8000ece:	17d3      	asrs	r3, r2, #31
 8000ed0:	1ac9      	subs	r1, r1, r3
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	1ad1      	subs	r1, r2, r3
 8000eda:	b2ca      	uxtb	r2, r1
 8000edc:	4b31      	ldr	r3, [pc, #196]	@ (8000fa4 <apply_filter+0x13c>)
 8000ede:	701a      	strb	r2, [r3, #0]

    float sum_x = 0, sum_y = 0, sum_z = 0;
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	f04f 0300 	mov.w	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < FILTER_SAMPLES; i++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	e031      	b.n	8000f5c <apply_filter+0xf4>
        sum_x += filter_buffer[i][0];
 8000ef8:	492b      	ldr	r1, [pc, #172]	@ (8000fa8 <apply_filter+0x140>)
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	440b      	add	r3, r1
 8000f06:	edd3 7a00 	vldr	s15, [r3]
 8000f0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f12:	edc7 7a07 	vstr	s15, [r7, #28]
        sum_y += filter_buffer[i][1];
 8000f16:	4924      	ldr	r1, [pc, #144]	@ (8000fa8 <apply_filter+0x140>)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	3304      	adds	r3, #4
 8000f26:	edd3 7a00 	vldr	s15, [r3]
 8000f2a:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f32:	edc7 7a06 	vstr	s15, [r7, #24]
        sum_z += filter_buffer[i][2];
 8000f36:	491c      	ldr	r1, [pc, #112]	@ (8000fa8 <apply_filter+0x140>)
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	3308      	adds	r3, #8
 8000f46:	edd3 7a00 	vldr	s15, [r3]
 8000f4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f52:	edc7 7a05 	vstr	s15, [r7, #20]
    for(int i = 0; i < FILTER_SAMPLES; i++) {
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	ddca      	ble.n	8000ef8 <apply_filter+0x90>
    }

    *x = sum_x / FILTER_SAMPLES;
 8000f62:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f66:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	edc3 7a00 	vstr	s15, [r3]
    *y = sum_y / FILTER_SAMPLES;
 8000f74:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f78:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000f7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	edc3 7a00 	vstr	s15, [r3]
    *z = sum_z / FILTER_SAMPLES;
 8000f86:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f8a:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	edc3 7a00 	vstr	s15, [r3]
}
 8000f98:	bf00      	nop
 8000f9a:	3724      	adds	r7, #36	@ 0x24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	2000029c 	.word	0x2000029c
 8000fa8:	20000260 	.word	0x20000260
 8000fac:	66666667 	.word	0x66666667

08000fb0 <MPU6050_1_Init>:

void MPU6050_1_Init(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
    // MPU6050 reset
    MPU6050_1_Write_Byte(PWR_MGMT_1_REG, 0x80);
 8000fb6:	2180      	movs	r1, #128	@ 0x80
 8000fb8:	206b      	movs	r0, #107	@ 0x6b
 8000fba:	f7ff ff39 	bl	8000e30 <MPU6050_1_Write_Byte>
    HAL_Delay(100);
 8000fbe:	2064      	movs	r0, #100	@ 0x64
 8000fc0:	f001 fcc0 	bl	8002944 <HAL_Delay>
    // WHO_AM_I kontrolü
    uint8_t who_am_i = MPU6050_1_Read_Byte(WHO_AM_I_REG);
 8000fc4:	2075      	movs	r0, #117	@ 0x75
 8000fc6:	f000 f879 	bl	80010bc <MPU6050_1_Read_Byte>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
    if(who_am_i != 0x68) {
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b68      	cmp	r3, #104	@ 0x68
 8000fd2:	d001      	beq.n	8000fd8 <MPU6050_1_Init+0x28>
        Error_Handler(); // Sensör bulunamadı
 8000fd4:	f001 f9bc 	bl	8002350 <Error_Handler>
    }
    // Wake up device
    MPU6050_1_Write_Byte(PWR_MGMT_1_REG, 0x00);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	206b      	movs	r0, #107	@ 0x6b
 8000fdc:	f7ff ff28 	bl	8000e30 <MPU6050_1_Write_Byte>
    // Set sample rate
    MPU6050_1_Write_Byte(SMPLRT_DIV_REG, 0x07);
 8000fe0:	2107      	movs	r1, #7
 8000fe2:	2019      	movs	r0, #25
 8000fe4:	f7ff ff24 	bl	8000e30 <MPU6050_1_Write_Byte>
    // Configure accelerometer
    MPU6050_1_Write_Byte(ACCEL_CONFIG_REG, 0x00);
 8000fe8:	2100      	movs	r1, #0
 8000fea:	201c      	movs	r0, #28
 8000fec:	f7ff ff20 	bl	8000e30 <MPU6050_1_Write_Byte>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <MPU6050_1_Read_All>:

void MPU6050_1_Read_All(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af04      	add	r7, sp, #16
    uint8_t Rec_Data[6];

    HAL_I2C_Mem_Read(&hi2c3, MPU6050_1_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 100);
 8000ffe:	2364      	movs	r3, #100	@ 0x64
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2306      	movs	r3, #6
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	463b      	mov	r3, r7
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2301      	movs	r3, #1
 800100c:	223b      	movs	r2, #59	@ 0x3b
 800100e:	21d0      	movs	r1, #208	@ 0xd0
 8001010:	4827      	ldr	r0, [pc, #156]	@ (80010b0 <MPU6050_1_Read_All+0xb8>)
 8001012:	f002 fdad 	bl	8003b70 <HAL_I2C_Mem_Read>

    MPU6050_1.Accel_X = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]) / 16384.0;
 8001016:	783b      	ldrb	r3, [r7, #0]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b21a      	sxth	r2, r3
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21b      	sxth	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fa21 	bl	800046c <__aeabi_i2d>
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <MPU6050_1_Read_All+0xbc>)
 8001030:	f7ff fbb0 	bl	8000794 <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fd30 	bl	8000aa0 <__aeabi_d2f>
 8001040:	4603      	mov	r3, r0
 8001042:	4a1d      	ldr	r2, [pc, #116]	@ (80010b8 <MPU6050_1_Read_All+0xc0>)
 8001044:	6013      	str	r3, [r2, #0]
    MPU6050_1.Accel_Y = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]) / 16384.0;
 8001046:	78bb      	ldrb	r3, [r7, #2]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21b      	sxth	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa09 	bl	800046c <__aeabi_i2d>
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <MPU6050_1_Read_All+0xbc>)
 8001060:	f7ff fb98 	bl	8000794 <__aeabi_ddiv>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fd18 	bl	8000aa0 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	4a11      	ldr	r2, [pc, #68]	@ (80010b8 <MPU6050_1_Read_All+0xc0>)
 8001074:	6053      	str	r3, [r2, #4]
    MPU6050_1.Accel_Z = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]) / 16384.0;
 8001076:	793b      	ldrb	r3, [r7, #4]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b21a      	sxth	r2, r3
 800107c:	797b      	ldrb	r3, [r7, #5]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21b      	sxth	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f9f1 	bl	800046c <__aeabi_i2d>
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <MPU6050_1_Read_All+0xbc>)
 8001090:	f7ff fb80 	bl	8000794 <__aeabi_ddiv>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fd00 	bl	8000aa0 <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <MPU6050_1_Read_All+0xc0>)
 80010a4:	6093      	str	r3, [r2, #8]
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000170 	.word	0x20000170
 80010b4:	40d00000 	.word	0x40d00000
 80010b8:	20000254 	.word	0x20000254

080010bc <MPU6050_1_Read_Byte>:

uint8_t MPU6050_1_Read_Byte(uint8_t reg) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    HAL_I2C_Mem_Read(&hi2c3, MPU6050_1_ADDR, reg, 1, &data, 1, 1000);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ce:	9302      	str	r3, [sp, #8]
 80010d0:	2301      	movs	r3, #1
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	f107 030f 	add.w	r3, r7, #15
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2301      	movs	r3, #1
 80010dc:	21d0      	movs	r1, #208	@ 0xd0
 80010de:	4804      	ldr	r0, [pc, #16]	@ (80010f0 <MPU6050_1_Read_Byte+0x34>)
 80010e0:	f002 fd46 	bl	8003b70 <HAL_I2C_Mem_Read>
    return data;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000170 	.word	0x20000170

080010f4 <alert_user>:

void alert_user(uint8_t state) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
    // LED ve buzzer kontrolü
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, state ? GPIO_PIN_SET : GPIO_PIN_RESET); // LED
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf14      	ite	ne
 8001104:	2301      	movne	r3, #1
 8001106:	2300      	moveq	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001110:	4809      	ldr	r0, [pc, #36]	@ (8001138 <alert_user+0x44>)
 8001112:	f002 fad5 	bl	80036c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, state ? GPIO_PIN_SET : GPIO_PIN_RESET); // Buzzer
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	bf14      	ite	ne
 800111c:	2301      	movne	r3, #1
 800111e:	2300      	moveq	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001128:	4803      	ldr	r0, [pc, #12]	@ (8001138 <alert_user+0x44>)
 800112a:	f002 fac9 	bl	80036c0 <HAL_GPIO_WritePin>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40020800 	.word	0x40020800
 800113c:	00000000 	.word	0x00000000

08001140 <check_posture>:

void check_posture(float x, float y) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	ed87 0a01 	vstr	s0, [r7, #4]
 800114a:	edc7 0a00 	vstr	s1, [r7]
    // Tüm yanlış duruşları tek koşulda kontrol et
    uint8_t bad_posture = (y < FORWARD_THRESHOLD) ||   // Öne eğilme
 800114e:	6838      	ldr	r0, [r7, #0]
 8001150:	f7ff f99e 	bl	8000490 <__aeabi_f2d>
                         (y > BACKWARD_THRESHOLD) ||   // Arkaya yaslanma
                         (x < -SIDE_THRESHOLD) ||      // Sola eğilme
 8001154:	a318      	add	r3, pc, #96	@ (adr r3, 80011b8 <check_posture+0x78>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff fc63 	bl	8000a24 <__aeabi_dcmplt>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d11c      	bne.n	800119e <check_posture+0x5e>
                         (y > BACKWARD_THRESHOLD) ||   // Arkaya yaslanma
 8001164:	6838      	ldr	r0, [r7, #0]
 8001166:	f7ff f993 	bl	8000490 <__aeabi_f2d>
    uint8_t bad_posture = (y < FORWARD_THRESHOLD) ||   // Öne eğilme
 800116a:	a315      	add	r3, pc, #84	@ (adr r3, 80011c0 <check_posture+0x80>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fc76 	bl	8000a60 <__aeabi_dcmpgt>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d111      	bne.n	800119e <check_posture+0x5e>
                         (y > BACKWARD_THRESHOLD) ||   // Arkaya yaslanma
 800117a:	edd7 7a01 	vldr	s15, [r7, #4]
 800117e:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118a:	d408      	bmi.n	800119e <check_posture+0x5e>
                         (x < -SIDE_THRESHOLD) ||      // Sola eğilme
 800118c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001190:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119c:	dd01      	ble.n	80011a2 <check_posture+0x62>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <check_posture+0x64>
 80011a2:	2300      	movs	r3, #0
    uint8_t bad_posture = (y < FORWARD_THRESHOLD) ||   // Öne eğilme
 80011a4:	73fb      	strb	r3, [r7, #15]
                         (x > SIDE_THRESHOLD);         // Sağa eğilme

    alert_user(bad_posture);
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ffa3 	bl	80010f4 <alert_user>
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	9999999a 	.word	0x9999999a
 80011bc:	bfe99999 	.word	0xbfe99999
 80011c0:	9999999a 	.word	0x9999999a
 80011c4:	3fe99999 	.word	0x3fe99999

080011c8 <Servo_SetAngle>:

void Servo_SetAngle(uint16_t angle) {
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
    uint16_t pulse = 500 + (angle * 2000) / 180;
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <Servo_SetAngle+0x40>)
 80011de:	fb82 1203 	smull	r1, r2, r2, r3
 80011e2:	441a      	add	r2, r3
 80011e4:	11d2      	asrs	r2, r2, #7
 80011e6:	17db      	asrs	r3, r3, #31
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80011f0:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <Servo_SetAngle+0x44>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	89fa      	ldrh	r2, [r7, #14]
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	b60b60b7 	.word	0xb60b60b7
 800120c:	2000020c 	.word	0x2000020c

08001210 <DHT11_Start>:

void DHT11_Start(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = DHT11_DATA_Pin;
 8001224:	2301      	movs	r3, #1
 8001226:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122c:	2301      	movs	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4619      	mov	r1, r3
 8001238:	480f      	ldr	r0, [pc, #60]	@ (8001278 <DHT11_Start+0x68>)
 800123a:	f002 f88d 	bl	8003358 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2101      	movs	r1, #1
 8001242:	480d      	ldr	r0, [pc, #52]	@ (8001278 <DHT11_Start+0x68>)
 8001244:	f002 fa3c 	bl	80036c0 <HAL_GPIO_WritePin>
    HAL_Delay(18);
 8001248:	2012      	movs	r0, #18
 800124a:	f001 fb7b 	bl	8002944 <HAL_Delay>

    HAL_GPIO_WritePin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2101      	movs	r1, #1
 8001252:	4809      	ldr	r0, [pc, #36]	@ (8001278 <DHT11_Start+0x68>)
 8001254:	f002 fa34 	bl	80036c0 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = DHT11_DATA_Pin;
 8001258:	2301      	movs	r3, #1
 800125a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001260:	2301      	movs	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4803      	ldr	r0, [pc, #12]	@ (8001278 <DHT11_Start+0x68>)
 800126a:	f002 f875 	bl	8003358 <HAL_GPIO_Init>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40020800 	.word	0x40020800

0800127c <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
    uint32_t timeout = 10000;
 8001282:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001286:	607b      	str	r3, [r7, #4]

    while(HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_SET && timeout--);
 8001288:	bf00      	nop
 800128a:	2101      	movs	r1, #1
 800128c:	4814      	ldr	r0, [pc, #80]	@ (80012e0 <DHT11_Check_Response+0x64>)
 800128e:	f002 f9ff 	bl	8003690 <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	2b01      	cmp	r3, #1
 8001296:	d104      	bne.n	80012a2 <DHT11_Check_Response+0x26>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	1e5a      	subs	r2, r3, #1
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f3      	bne.n	800128a <DHT11_Check_Response+0xe>
    if(timeout == 0) return 0;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <DHT11_Check_Response+0x30>
 80012a8:	2300      	movs	r3, #0
 80012aa:	e015      	b.n	80012d8 <DHT11_Check_Response+0x5c>

    timeout = 10000;
 80012ac:	f242 7310 	movw	r3, #10000	@ 0x2710
 80012b0:	607b      	str	r3, [r7, #4]
    while(HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_RESET && timeout--);
 80012b2:	bf00      	nop
 80012b4:	2101      	movs	r1, #1
 80012b6:	480a      	ldr	r0, [pc, #40]	@ (80012e0 <DHT11_Check_Response+0x64>)
 80012b8:	f002 f9ea 	bl	8003690 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d104      	bne.n	80012cc <DHT11_Check_Response+0x50>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	1e5a      	subs	r2, r3, #1
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f3      	bne.n	80012b4 <DHT11_Check_Response+0x38>
    if(timeout == 0) return 0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <DHT11_Check_Response+0x5a>
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <DHT11_Check_Response+0x5c>

    return 1;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40020800 	.word	0x40020800

080012e4 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
    uint8_t value = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	71fb      	strb	r3, [r7, #7]

    for(int i=0; i<8; i++) {
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	e028      	b.n	8001346 <DHT11_Read+0x62>
        while(HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_RESET);
 80012f4:	bf00      	nop
 80012f6:	2101      	movs	r1, #1
 80012f8:	4817      	ldr	r0, [pc, #92]	@ (8001358 <DHT11_Read+0x74>)
 80012fa:	f002 f9c9 	bl	8003690 <HAL_GPIO_ReadPin>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f8      	beq.n	80012f6 <DHT11_Read+0x12>

        HAL_Delay_us(40);
 8001304:	2028      	movs	r0, #40	@ 0x28
 8001306:	f001 fa59 	bl	80027bc <HAL_Delay_us>
        if(HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_SET) {
 800130a:	2101      	movs	r1, #1
 800130c:	4812      	ldr	r0, [pc, #72]	@ (8001358 <DHT11_Read+0x74>)
 800130e:	f002 f9bf 	bl	8003690 <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d10b      	bne.n	8001330 <DHT11_Read+0x4c>
            value |= (1 << (7-i));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2201      	movs	r2, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	b25a      	sxtb	r2, r3
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	4313      	orrs	r3, r2
 800132c:	b25b      	sxtb	r3, r3
 800132e:	71fb      	strb	r3, [r7, #7]
        }

        while(HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_SET);
 8001330:	bf00      	nop
 8001332:	2101      	movs	r1, #1
 8001334:	4808      	ldr	r0, [pc, #32]	@ (8001358 <DHT11_Read+0x74>)
 8001336:	f002 f9ab 	bl	8003690 <HAL_GPIO_ReadPin>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d0f8      	beq.n	8001332 <DHT11_Read+0x4e>
    for(int i=0; i<8; i++) {
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2b07      	cmp	r3, #7
 800134a:	ddd3      	ble.n	80012f4 <DHT11_Read+0x10>
    }

    return value;
 800134c:	79fb      	ldrb	r3, [r7, #7]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40020800 	.word	0x40020800

0800135c <Read_DHT11>:

void Read_DHT11(float *temperature, float *humidity) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
    uint8_t data[5] = {0};
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	2300      	movs	r3, #0
 800136c:	733b      	strb	r3, [r7, #12]

    DHT11_Start();
 800136e:	f7ff ff4f 	bl	8001210 <DHT11_Start>
    // Sensör yanıt verene kadar bekle (ilk başta uykuda olabilir)
    while (!DHT11_Check_Response()) {
 8001372:	e004      	b.n	800137e <Read_DHT11+0x22>
        HAL_Delay(100);  // 100 ms bekle
 8001374:	2064      	movs	r0, #100	@ 0x64
 8001376:	f001 fae5 	bl	8002944 <HAL_Delay>
        DHT11_Start();   // tekrar başlat
 800137a:	f7ff ff49 	bl	8001210 <DHT11_Start>
    while (!DHT11_Check_Response()) {
 800137e:	f7ff ff7d 	bl	800127c <DHT11_Check_Response>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f5      	beq.n	8001374 <Read_DHT11+0x18>
    }

    data[0] = DHT11_Read();
 8001388:	f7ff ffac 	bl	80012e4 <DHT11_Read>
 800138c:	4603      	mov	r3, r0
 800138e:	723b      	strb	r3, [r7, #8]
    data[1] = DHT11_Read();
 8001390:	f7ff ffa8 	bl	80012e4 <DHT11_Read>
 8001394:	4603      	mov	r3, r0
 8001396:	727b      	strb	r3, [r7, #9]
    data[2] = DHT11_Read();
 8001398:	f7ff ffa4 	bl	80012e4 <DHT11_Read>
 800139c:	4603      	mov	r3, r0
 800139e:	72bb      	strb	r3, [r7, #10]
    data[3] = DHT11_Read();
 80013a0:	f7ff ffa0 	bl	80012e4 <DHT11_Read>
 80013a4:	4603      	mov	r3, r0
 80013a6:	72fb      	strb	r3, [r7, #11]
    data[4] = DHT11_Read();
 80013a8:	f7ff ff9c 	bl	80012e4 <DHT11_Read>
 80013ac:	4603      	mov	r3, r0
 80013ae:	733b      	strb	r3, [r7, #12]

    if(data[4] == (data[0] + data[1] + data[2] + data[3])) {
 80013b0:	7b3b      	ldrb	r3, [r7, #12]
 80013b2:	461a      	mov	r2, r3
 80013b4:	7a3b      	ldrb	r3, [r7, #8]
 80013b6:	4619      	mov	r1, r3
 80013b8:	7a7b      	ldrb	r3, [r7, #9]
 80013ba:	440b      	add	r3, r1
 80013bc:	7ab9      	ldrb	r1, [r7, #10]
 80013be:	440b      	add	r3, r1
 80013c0:	7af9      	ldrb	r1, [r7, #11]
 80013c2:	440b      	add	r3, r1
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d10f      	bne.n	80013e8 <Read_DHT11+0x8c>
        *humidity = data[0];
 80013c8:	7a3b      	ldrb	r3, [r7, #8]
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	edc3 7a00 	vstr	s15, [r3]
        *temperature = data[2];
 80013d8:	7abb      	ldrb	r3, [r7, #10]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edc3 7a00 	vstr	s15, [r3]
    }
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <setServoAngle>:

void setServoAngle(uint16_t angle) {
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
    // Açıyı pulse süresine çevir (500-2500µs aralığı)
    uint16_t pulse = SERVO_MIN + (angle * (SERVO_MAX - SERVO_MIN) / 180);
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <setServoAngle+0x40>)
 8001406:	fb82 1203 	smull	r1, r2, r2, r3
 800140a:	441a      	add	r2, r3
 800140c:	11d2      	asrs	r2, r2, #7
 800140e:	17db      	asrs	r3, r3, #31
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	b29b      	uxth	r3, r3
 8001414:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001418:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pulse);  // TIM2_CH4 kullanılıyor
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <setServoAngle+0x44>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	89fa      	ldrh	r2, [r7, #14]
 8001420:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	b60b60b7 	.word	0xb60b60b7
 8001434:	200001c4 	.word	0x200001c4

08001438 <MPU6050_2_Init>:




/* MPU6050 Implementation */
void MPU6050_2_Init() {
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af04      	add	r7, sp, #16
    uint8_t check;
   uint8_t data=0;
 800143e:	2300      	movs	r3, #0
 8001440:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_2_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8001442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	2301      	movs	r3, #1
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	1dbb      	adds	r3, r7, #6
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2301      	movs	r3, #1
 8001452:	221c      	movs	r2, #28
 8001454:	21d0      	movs	r1, #208	@ 0xd0
 8001456:	4826      	ldr	r0, [pc, #152]	@ (80014f0 <MPU6050_2_Init+0xb8>)
 8001458:	f002 fa90 	bl	800397c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_2_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 800145c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001460:	9302      	str	r3, [sp, #8]
 8001462:	2301      	movs	r3, #1
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	2275      	movs	r2, #117	@ 0x75
 800146e:	21d0      	movs	r1, #208	@ 0xd0
 8001470:	481f      	ldr	r0, [pc, #124]	@ (80014f0 <MPU6050_2_Init+0xb8>)
 8001472:	f002 fb7d 	bl	8003b70 <HAL_I2C_Mem_Read>

    if (check == 0x68) {
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b68      	cmp	r3, #104	@ 0x68
 800147a:	d12d      	bne.n	80014d8 <MPU6050_2_Init+0xa0>
        data = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_2_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8001480:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	2301      	movs	r3, #1
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	1dbb      	adds	r3, r7, #6
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2301      	movs	r3, #1
 8001490:	226b      	movs	r2, #107	@ 0x6b
 8001492:	21d0      	movs	r1, #208	@ 0xd0
 8001494:	4816      	ldr	r0, [pc, #88]	@ (80014f0 <MPU6050_2_Init+0xb8>)
 8001496:	f002 fa71 	bl	800397c <HAL_I2C_Mem_Write>
        data = 0x07;
 800149a:	2307      	movs	r3, #7
 800149c:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_2_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 800149e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	2301      	movs	r3, #1
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	1dbb      	adds	r3, r7, #6
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	2219      	movs	r2, #25
 80014b0:	21d0      	movs	r1, #208	@ 0xd0
 80014b2:	480f      	ldr	r0, [pc, #60]	@ (80014f0 <MPU6050_2_Init+0xb8>)
 80014b4:	f002 fa62 	bl	800397c <HAL_I2C_Mem_Write>
        data = 0x00;
 80014b8:	2300      	movs	r3, #0
 80014ba:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_2_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 80014bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2301      	movs	r3, #1
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	1dbb      	adds	r3, r7, #6
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	221c      	movs	r2, #28
 80014ce:	21d0      	movs	r1, #208	@ 0xd0
 80014d0:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <MPU6050_2_Init+0xb8>)
 80014d2:	f002 fa53 	bl	800397c <HAL_I2C_Mem_Write>
    } else {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Error LED
        while (1);
    }
}
 80014d6:	e007      	b.n	80014e8 <MPU6050_2_Init+0xb0>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Error LED
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014de:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MPU6050_2_Init+0xbc>)
 80014e0:	f002 f8ee 	bl	80036c0 <HAL_GPIO_WritePin>
        while (1);
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <MPU6050_2_Init+0xac>
}
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000011c 	.word	0x2000011c
 80014f4:	40020c00 	.word	0x40020c00

080014f8 <MPU6050_2_Read_Accel>:

void MPU6050_2_Read_Accel(float *ax, float *ay, float *az) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
    uint8_t recData[6];
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_2_ADDR, ACCEL_XOUT_H_REG, 1, recData, 6, 1000);
 8001504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	2306      	movs	r3, #6
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	223b      	movs	r2, #59	@ 0x3b
 8001518:	21d0      	movs	r1, #208	@ 0xd0
 800151a:	4827      	ldr	r0, [pc, #156]	@ (80015b8 <MPU6050_2_Read_Accel+0xc0>)
 800151c:	f002 fb28 	bl	8003b70 <HAL_I2C_Mem_Read>
    *ax = (int16_t)(recData[0] << 8 | recData[1]) / 16384.0;
 8001520:	7c3b      	ldrb	r3, [r7, #16]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	7c7b      	ldrb	r3, [r7, #17]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe ff9c 	bl	800046c <__aeabi_i2d>
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <MPU6050_2_Read_Accel+0xc4>)
 800153a:	f7ff f92b 	bl	8000794 <__aeabi_ddiv>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff faab 	bl	8000aa0 <__aeabi_d2f>
 800154a:	4602      	mov	r2, r0
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	601a      	str	r2, [r3, #0]
    *ay = (int16_t)(recData[2] << 8 | recData[3]) / 16384.0;
 8001550:	7cbb      	ldrb	r3, [r7, #18]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	7cfb      	ldrb	r3, [r7, #19]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21b      	sxth	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ff84 	bl	800046c <__aeabi_i2d>
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MPU6050_2_Read_Accel+0xc4>)
 800156a:	f7ff f913 	bl	8000794 <__aeabi_ddiv>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fa93 	bl	8000aa0 <__aeabi_d2f>
 800157a:	4602      	mov	r2, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	601a      	str	r2, [r3, #0]
    *az = (int16_t)(recData[4] << 8 | recData[5]) / 16384.0;
 8001580:	7d3b      	ldrb	r3, [r7, #20]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21a      	sxth	r2, r3
 8001586:	7d7b      	ldrb	r3, [r7, #21]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21b      	sxth	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ff6c 	bl	800046c <__aeabi_i2d>
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <MPU6050_2_Read_Accel+0xc4>)
 800159a:	f7ff f8fb 	bl	8000794 <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fa7b 	bl	8000aa0 <__aeabi_d2f>
 80015aa:	4602      	mov	r2, r0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	601a      	str	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000011c 	.word	0x2000011c
 80015bc:	40d00000 	.word	0x40d00000

080015c0 <Read_Soil_Sensor>:

/* Soil Moisture Implementation */
uint32_t Read_Soil_Sensor(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 10; i++) {
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	e010      	b.n	80015f2 <Read_Soil_Sensor+0x32>
        HAL_ADC_Start(&hadc1);
 80015d0:	480f      	ldr	r0, [pc, #60]	@ (8001610 <Read_Soil_Sensor+0x50>)
 80015d2:	f001 fa1f 	bl	8002a14 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 10);
 80015d6:	210a      	movs	r1, #10
 80015d8:	480d      	ldr	r0, [pc, #52]	@ (8001610 <Read_Soil_Sensor+0x50>)
 80015da:	f001 fb20 	bl	8002c1e <HAL_ADC_PollForConversion>
        sum += HAL_ADC_GetValue(&hadc1);
 80015de:	480c      	ldr	r0, [pc, #48]	@ (8001610 <Read_Soil_Sensor+0x50>)
 80015e0:	f001 fba8 	bl	8002d34 <HAL_ADC_GetValue>
 80015e4:	4602      	mov	r2, r0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 10; i++) {
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	ddeb      	ble.n	80015d0 <Read_Soil_Sensor+0x10>
    }
    HAL_ADC_Stop(&hadc1);
 80015f8:	4805      	ldr	r0, [pc, #20]	@ (8001610 <Read_Soil_Sensor+0x50>)
 80015fa:	f001 fadd 	bl	8002bb8 <HAL_ADC_Stop>
    return sum / 10;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <Read_Soil_Sensor+0x54>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	08db      	lsrs	r3, r3, #3
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2000008c 	.word	0x2000008c
 8001614:	cccccccd 	.word	0xcccccccd

08001618 <enable_DWT>:


/* Trash Bin Implementation */
void enable_DWT() {
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800161c:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <enable_DWT+0x2c>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4a08      	ldr	r2, [pc, #32]	@ (8001644 <enable_DWT+0x2c>)
 8001622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001626:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <enable_DWT+0x30>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <enable_DWT+0x30>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <enable_DWT+0x30>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6013      	str	r3, [r2, #0]
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000edf0 	.word	0xe000edf0
 8001648:	e0001000 	.word	0xe0001000

0800164c <delay_us>:

void delay_us(uint32_t us) {
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8001654:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <delay_us+0x40>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	60fb      	str	r3, [r7, #12]
    uint32_t cycles = us * (SystemCoreClock / 1000000);
 800165a:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <delay_us+0x44>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <delay_us+0x48>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	0c9a      	lsrs	r2, r3, #18
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	fb02 f303 	mul.w	r3, r2, r3
 800166c:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 800166e:	bf00      	nop
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <delay_us+0x40>)
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	429a      	cmp	r2, r3
 800167c:	d8f8      	bhi.n	8001670 <delay_us+0x24>
}
 800167e:	bf00      	nop
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e0001000 	.word	0xe0001000
 8001690:	20000000 	.word	0x20000000
 8001694:	431bde83 	.word	0x431bde83

08001698 <get_distance_no_timer>:

float get_distance_no_timer() {
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
    uint32_t timeout = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
    uint32_t pulse_start = 0, pulse_end = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]

    // Send TRIG signal
    HAL_GPIO_WritePin(trig_GPIO_Port, trig_Pin, GPIO_PIN_SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2140      	movs	r1, #64	@ 0x40
 80016ae:	4838      	ldr	r0, [pc, #224]	@ (8001790 <get_distance_no_timer+0xf8>)
 80016b0:	f002 f806 	bl	80036c0 <HAL_GPIO_WritePin>
    delay_us(10);
 80016b4:	200a      	movs	r0, #10
 80016b6:	f7ff ffc9 	bl	800164c <delay_us>
    HAL_GPIO_WritePin(trig_GPIO_Port,trig_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2140      	movs	r1, #64	@ 0x40
 80016be:	4834      	ldr	r0, [pc, #208]	@ (8001790 <get_distance_no_timer+0xf8>)
 80016c0:	f001 fffe 	bl	80036c0 <HAL_GPIO_WritePin>

    // Wait for ECHO rising edge
    timeout = 100000;
 80016c4:	4b33      	ldr	r3, [pc, #204]	@ (8001794 <get_distance_no_timer+0xfc>)
 80016c6:	617b      	str	r3, [r7, #20]
    while(HAL_GPIO_ReadPin(echo_GPIO_Port, echo_Pin) == GPIO_PIN_RESET) {
 80016c8:	e009      	b.n	80016de <get_distance_no_timer+0x46>
        if(timeout-- == 0) return -1;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	1e5a      	subs	r2, r3, #1
 80016ce:	617a      	str	r2, [r7, #20]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <get_distance_no_timer+0x40>
 80016d4:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <get_distance_no_timer+0x100>)
 80016d6:	e050      	b.n	800177a <get_distance_no_timer+0xe2>
        delay_us(1);
 80016d8:	2001      	movs	r0, #1
 80016da:	f7ff ffb7 	bl	800164c <delay_us>
    while(HAL_GPIO_ReadPin(echo_GPIO_Port, echo_Pin) == GPIO_PIN_RESET) {
 80016de:	2180      	movs	r1, #128	@ 0x80
 80016e0:	482b      	ldr	r0, [pc, #172]	@ (8001790 <get_distance_no_timer+0xf8>)
 80016e2:	f001 ffd5 	bl	8003690 <HAL_GPIO_ReadPin>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0ee      	beq.n	80016ca <get_distance_no_timer+0x32>
    }
    pulse_start = DWT->CYCCNT;
 80016ec:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <get_distance_no_timer+0x104>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	613b      	str	r3, [r7, #16]

    // Wait for ECHO falling edge
    timeout = 100000;
 80016f2:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <get_distance_no_timer+0xfc>)
 80016f4:	617b      	str	r3, [r7, #20]
    while(HAL_GPIO_ReadPin(echo_GPIO_Port, echo_Pin) == GPIO_PIN_SET) {
 80016f6:	e006      	b.n	8001706 <get_distance_no_timer+0x6e>
        if(timeout-- == 0) return -1;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	1e5a      	subs	r2, r3, #1
 80016fc:	617a      	str	r2, [r7, #20]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <get_distance_no_timer+0x6e>
 8001702:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <get_distance_no_timer+0x100>)
 8001704:	e039      	b.n	800177a <get_distance_no_timer+0xe2>
    while(HAL_GPIO_ReadPin(echo_GPIO_Port, echo_Pin) == GPIO_PIN_SET) {
 8001706:	2180      	movs	r1, #128	@ 0x80
 8001708:	4821      	ldr	r0, [pc, #132]	@ (8001790 <get_distance_no_timer+0xf8>)
 800170a:	f001 ffc1 	bl	8003690 <HAL_GPIO_ReadPin>
 800170e:	4603      	mov	r3, r0
 8001710:	2b01      	cmp	r3, #1
 8001712:	d0f1      	beq.n	80016f8 <get_distance_no_timer+0x60>
    }
    pulse_end = DWT->CYCCNT;
 8001714:	4b21      	ldr	r3, [pc, #132]	@ (800179c <get_distance_no_timer+0x104>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	60fb      	str	r3, [r7, #12]

    // Calculate distance
    uint32_t pulse_cycles = pulse_end - pulse_start;
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	60bb      	str	r3, [r7, #8]
    float pulse_us = pulse_cycles / (SystemCoreClock / 1000000.0f);
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800172c:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <get_distance_no_timer+0x108>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001738:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80017a4 <get_distance_no_timer+0x10c>
 800173c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001744:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pulse_us * 0.0343) / 2;
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7fe fea1 	bl	8000490 <__aeabi_f2d>
 800174e:	a30e      	add	r3, pc, #56	@ (adr r3, 8001788 <get_distance_no_timer+0xf0>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe fef4 	bl	8000540 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001768:	f7ff f814 	bl	8000794 <__aeabi_ddiv>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff f994 	bl	8000aa0 <__aeabi_d2f>
 8001778:	4603      	mov	r3, r0
}
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eeb0 0a67 	vmov.f32	s0, s15
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	04816f00 	.word	0x04816f00
 800178c:	3fa18fc5 	.word	0x3fa18fc5
 8001790:	40020800 	.word	0x40020800
 8001794:	000186a0 	.word	0x000186a0
 8001798:	bf800000 	.word	0xbf800000
 800179c:	e0001000 	.word	0xe0001000
 80017a0:	20000000 	.word	0x20000000
 80017a4:	49742400 	.word	0x49742400

080017a8 <Read_ADC>:
uint16_t Read_ADC(ADC_HandleTypeDef* hadc2) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

ADC_ChannelConfTypeDef sConfig = {0};
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]

sConfig.Channel = ADC_CHANNEL_5;
 80017be:	2305      	movs	r3, #5
 80017c0:	60bb      	str	r3, [r7, #8]

sConfig.Rank = 1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]

sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80017c6:	2307      	movs	r3, #7
 80017c8:	613b      	str	r3, [r7, #16]

HAL_ADC_ConfigChannel(hadc2, &sConfig);
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f001 fabd 	bl	8002d50 <HAL_ADC_ConfigChannel>



HAL_ADC_Start(hadc2);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f001 f91c 	bl	8002a14 <HAL_ADC_Start>

HAL_ADC_PollForConversion(hadc2, HAL_MAX_DELAY);
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f001 fa1c 	bl	8002c1e <HAL_ADC_PollForConversion>

return HAL_ADC_GetValue(hadc2);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f001 faa4 	bl	8002d34 <HAL_ADC_GetValue>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29b      	uxth	r3, r3

}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b090      	sub	sp, #64	@ 0x40
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	  enable_DWT();
 80017fe:	f7ff ff0b 	bl	8001618 <enable_DWT>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001802:	f001 f82d 	bl	8002860 <HAL_Init>

  /* USER CODE BEGIN Init */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001806:	4bb3      	ldr	r3, [pc, #716]	@ (8001ad4 <main+0x2dc>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	4ab2      	ldr	r2, [pc, #712]	@ (8001ad4 <main+0x2dc>)
 800180c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001810:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001812:	4bb1      	ldr	r3, [pc, #708]	@ (8001ad8 <main+0x2e0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4ab0      	ldr	r2, [pc, #704]	@ (8001ad8 <main+0x2e0>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181e:	f000 fa3f 	bl	8001ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001822:	f000 fc95 	bl	8002150 <MX_GPIO_Init>
  MX_I2C3_Init();
 8001826:	f000 fb77 	bl	8001f18 <MX_I2C3_Init>
  MX_ADC1_Init();
 800182a:	f000 faa3 	bl	8001d74 <MX_ADC1_Init>
  MX_ADC2_Init();
 800182e:	f000 faf3 	bl	8001e18 <MX_ADC2_Init>
  MX_I2C1_Init();
 8001832:	f000 fb43 	bl	8001ebc <MX_I2C1_Init>
  MX_TIM2_Init();
 8001836:	f000 fb9d 	bl	8001f74 <MX_TIM2_Init>
  MX_TIM3_Init();
 800183a:	f000 fc11 	bl	8002060 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // MPU6050 ve filtre başlatma
   memset(filter_buffer, 0, sizeof(filter_buffer));
 800183e:	223c      	movs	r2, #60	@ 0x3c
 8001840:	2100      	movs	r1, #0
 8001842:	48a6      	ldr	r0, [pc, #664]	@ (8001adc <main+0x2e4>)
 8001844:	f004 fa8a 	bl	8005d5c <memset>
   MPU6050_1_Init();
 8001848:	f7ff fbb2 	bl	8000fb0 <MPU6050_1_Init>
   MPU6050_2_Init();
 800184c:	f7ff fdf4 	bl	8001438 <MPU6050_2_Init>
   // PWM başlat
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001850:	2100      	movs	r1, #0
 8001852:	48a3      	ldr	r0, [pc, #652]	@ (8001ae0 <main+0x2e8>)
 8001854:	f003 fc9e 	bl	8005194 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);  // Servo PWM başlat
 8001858:	210c      	movs	r1, #12
 800185a:	48a2      	ldr	r0, [pc, #648]	@ (8001ae4 <main+0x2ec>)
 800185c:	f003 fc9a 	bl	8005194 <HAL_TIM_PWM_Start>
   HAL_ADC_Start(&hadc1);                     // ADC başlat
 8001860:	48a1      	ldr	r0, [pc, #644]	@ (8001ae8 <main+0x2f0>)
 8001862:	f001 f8d7 	bl	8002a14 <HAL_ADC_Start>
   setServoAngle(90);                         // Başlangıçta musluk açık konum
 8001866:	205a      	movs	r0, #90	@ 0x5a
 8001868:	f7ff fdc2 	bl	80013f0 <setServoAngle>
   Servo_SetAngle(90);
 800186c:	205a      	movs	r0, #90	@ 0x5a
 800186e:	f7ff fcab 	bl	80011c8 <Servo_SetAngle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { // MPU6050 işlemleri
      MPU6050_1_Read_All();
 8001872:	f7ff fbc1 	bl	8000ff8 <MPU6050_1_Read_All>
      float x = MPU6050_1.Accel_X;
 8001876:	4b9d      	ldr	r3, [pc, #628]	@ (8001aec <main+0x2f4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
      float y = MPU6050_1.Accel_Y;
 800187c:	4b9b      	ldr	r3, [pc, #620]	@ (8001aec <main+0x2f4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	623b      	str	r3, [r7, #32]
      float z = MPU6050_1.Accel_Z;
 8001882:	4b9a      	ldr	r3, [pc, #616]	@ (8001aec <main+0x2f4>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61fb      	str	r3, [r7, #28]
      apply_filter(&x, &y, &z);
 8001888:	f107 021c 	add.w	r2, r7, #28
 800188c:	f107 0120 	add.w	r1, r7, #32
 8001890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fae7 	bl	8000e68 <apply_filter>
      check_posture(x, y);
 800189a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800189e:	ed97 7a08 	vldr	s14, [r7, #32]
 80018a2:	eef0 0a47 	vmov.f32	s1, s14
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	f7ff fc49 	bl	8001140 <check_posture>
      // 2. Gaz Sensörü (ADC_CHANNEL_13)
      HAL_ADC_Stop(&hadc1); // Önce ADC'yi durdur
 80018ae:	488e      	ldr	r0, [pc, #568]	@ (8001ae8 <main+0x2f0>)
 80018b0:	f001 f982 	bl	8002bb8 <HAL_ADC_Stop>
       ADC_ChannelConfTypeDef sConfig = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
       sConfig.Channel = ADC_CHANNEL_13;
 80018c2:	230d      	movs	r3, #13
 80018c4:	60fb      	str	r3, [r7, #12]
       sConfig.Rank = 1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	613b      	str	r3, [r7, #16]
       sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80018ca:	2303      	movs	r3, #3
 80018cc:	617b      	str	r3, [r7, #20]
       HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	4619      	mov	r1, r3
 80018d4:	4884      	ldr	r0, [pc, #528]	@ (8001ae8 <main+0x2f0>)
 80018d6:	f001 fa3b 	bl	8002d50 <HAL_ADC_ConfigChannel>
       HAL_ADC_Start(&hadc1);
 80018da:	4883      	ldr	r0, [pc, #524]	@ (8001ae8 <main+0x2f0>)
 80018dc:	f001 f89a 	bl	8002a14 <HAL_ADC_Start>
      if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 80018e0:	210a      	movs	r1, #10
 80018e2:	4881      	ldr	r0, [pc, #516]	@ (8001ae8 <main+0x2f0>)
 80018e4:	f001 f99b 	bl	8002c1e <HAL_ADC_PollForConversion>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d124      	bne.n	8001938 <main+0x140>
          gas_value = HAL_ADC_GetValue(&hadc1);
 80018ee:	487e      	ldr	r0, [pc, #504]	@ (8001ae8 <main+0x2f0>)
 80018f0:	f001 fa20 	bl	8002d34 <HAL_ADC_GetValue>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b7d      	ldr	r3, [pc, #500]	@ (8001af0 <main+0x2f8>)
 80018fa:	801a      	strh	r2, [r3, #0]
          if(gas_value > GAS_THRESHOLD) {
 80018fc:	4b7c      	ldr	r3, [pc, #496]	@ (8001af0 <main+0x2f8>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001904:	d90c      	bls.n	8001920 <main+0x128>
              gas_leak_detected = 1;
 8001906:	4b7b      	ldr	r3, [pc, #492]	@ (8001af4 <main+0x2fc>)
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
              Servo_SetAngle(90); // Pencere açık
 800190c:	205a      	movs	r0, #90	@ 0x5a
 800190e:	f7ff fc5b 	bl	80011c8 <Servo_SetAngle>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET); // BUZZER AÇ
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001918:	4877      	ldr	r0, [pc, #476]	@ (8001af8 <main+0x300>)
 800191a:	f001 fed1 	bl	80036c0 <HAL_GPIO_WritePin>
 800191e:	e00b      	b.n	8001938 <main+0x140>
          } else {
              gas_leak_detected = 0;
 8001920:	4b74      	ldr	r3, [pc, #464]	@ (8001af4 <main+0x2fc>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
              Servo_SetAngle(0); // Pencere kapalı
 8001926:	2000      	movs	r0, #0
 8001928:	f7ff fc4e 	bl	80011c8 <Servo_SetAngle>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // BUZZER KAPAT
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001932:	4871      	ldr	r0, [pc, #452]	@ (8001af8 <main+0x300>)
 8001934:	f001 fec4 	bl	80036c0 <HAL_GPIO_WritePin>
          }
      }
      HAL_ADC_Stop(&hadc1); // Gaz ölçümü bitti
 8001938:	486b      	ldr	r0, [pc, #428]	@ (8001ae8 <main+0x2f0>)
 800193a:	f001 f93d 	bl	8002bb8 <HAL_ADC_Stop>

      // DHT11'den sıcaklık ve nem ölçümü
      Read_DHT11(&temperature, &humidity);
 800193e:	496f      	ldr	r1, [pc, #444]	@ (8001afc <main+0x304>)
 8001940:	486f      	ldr	r0, [pc, #444]	@ (8001b00 <main+0x308>)
 8001942:	f7ff fd0b 	bl	800135c <Read_DHT11>

      // LED kontrolü (sıcaklık)
      HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800194c:	486d      	ldr	r0, [pc, #436]	@ (8001b04 <main+0x30c>)
 800194e:	f001 feb7 	bl	80036c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	2110      	movs	r1, #16
 8001956:	486c      	ldr	r0, [pc, #432]	@ (8001b08 <main+0x310>)
 8001958:	f001 feb2 	bl	80036c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001962:	4868      	ldr	r0, [pc, #416]	@ (8001b04 <main+0x30c>)
 8001964:	f001 feac 	bl	80036c0 <HAL_GPIO_WritePin>

      if(temperature > TEMP_HIGH_THRESHOLD) {
 8001968:	4b65      	ldr	r3, [pc, #404]	@ (8001b00 <main+0x308>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	dd06      	ble.n	800198a <main+0x192>
          HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001982:	4860      	ldr	r0, [pc, #384]	@ (8001b04 <main+0x30c>)
 8001984:	f001 fe9c 	bl	80036c0 <HAL_GPIO_WritePin>
 8001988:	e015      	b.n	80019b6 <main+0x1be>
      } else if(temperature < TEMP_LOW_THRESHOLD) {
 800198a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b00 <main+0x308>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	d505      	bpl.n	80019aa <main+0x1b2>
          HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2110      	movs	r1, #16
 80019a2:	4859      	ldr	r0, [pc, #356]	@ (8001b08 <main+0x310>)
 80019a4:	f001 fe8c 	bl	80036c0 <HAL_GPIO_WritePin>
 80019a8:	e005      	b.n	80019b6 <main+0x1be>
      } else {
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019b0:	4854      	ldr	r0, [pc, #336]	@ (8001b04 <main+0x30c>)
 80019b2:	f001 fe85 	bl	80036c0 <HAL_GPIO_WritePin>
      }
      // Su seviyesi kontrolü (ADC_CHANNEL_7)
          HAL_ADC_Stop(&hadc1); // Önce ADC'yi durdur
 80019b6:	484c      	ldr	r0, [pc, #304]	@ (8001ae8 <main+0x2f0>)
 80019b8:	f001 f8fe 	bl	8002bb8 <HAL_ADC_Stop>
          sConfig.Channel = ADC_CHANNEL_7;
 80019bc:	2307      	movs	r3, #7
 80019be:	60fb      	str	r3, [r7, #12]
          sConfig.Rank = 1;
 80019c0:	2301      	movs	r3, #1
 80019c2:	613b      	str	r3, [r7, #16]
          sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80019c4:	2303      	movs	r3, #3
 80019c6:	617b      	str	r3, [r7, #20]
          HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4619      	mov	r1, r3
 80019ce:	4846      	ldr	r0, [pc, #280]	@ (8001ae8 <main+0x2f0>)
 80019d0:	f001 f9be 	bl	8002d50 <HAL_ADC_ConfigChannel>
          HAL_ADC_Start(&hadc1);
 80019d4:	4844      	ldr	r0, [pc, #272]	@ (8001ae8 <main+0x2f0>)
 80019d6:	f001 f81d 	bl	8002a14 <HAL_ADC_Start>
      if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 80019da:	2164      	movs	r1, #100	@ 0x64
 80019dc:	4842      	ldr	r0, [pc, #264]	@ (8001ae8 <main+0x2f0>)
 80019de:	f001 f91e 	bl	8002c1e <HAL_ADC_PollForConversion>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d126      	bne.n	8001a36 <main+0x23e>
          uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 80019e8:	483f      	ldr	r0, [pc, #252]	@ (8001ae8 <main+0x2f0>)
 80019ea:	f001 f9a3 	bl	8002d34 <HAL_ADC_GetValue>
 80019ee:	63f8      	str	r0, [r7, #60]	@ 0x3c

          if (adcValue > WATER_THRESHOLD) {
 80019f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019f2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80019f6:	d90f      	bls.n	8001a18 <main+0x220>
              // Alarm aktif (su var)
              HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);  // LED YANIK
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019fe:	4843      	ldr	r0, [pc, #268]	@ (8001b0c <main+0x314>)
 8001a00:	f001 fe5e 	bl	80036c0 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET); // Buzzer açık
 8001a04:	2201      	movs	r2, #1
 8001a06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a0a:	4840      	ldr	r0, [pc, #256]	@ (8001b0c <main+0x314>)
 8001a0c:	f001 fe58 	bl	80036c0 <HAL_GPIO_WritePin>
              setServoAngle(0);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff fced 	bl	80013f0 <setServoAngle>
 8001a16:	e00e      	b.n	8001a36 <main+0x23e>
          } else {
              // Normal durum (su yok)
              HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);  // LED SÖNÜK
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a1e:	483b      	ldr	r0, [pc, #236]	@ (8001b0c <main+0x314>)
 8001a20:	f001 fe4e 	bl	80036c0 <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET); // Buzzer kapalı
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a2a:	4838      	ldr	r0, [pc, #224]	@ (8001b0c <main+0x314>)
 8001a2c:	f001 fe48 	bl	80036c0 <HAL_GPIO_WritePin>
              setServoAngle(90);  // Musluk açık
 8001a30:	205a      	movs	r0, #90	@ 0x5a
 8001a32:	f7ff fcdd 	bl	80013f0 <setServoAngle>
          }
      }
      HAL_ADC_Stop(&hadc1);
 8001a36:	482c      	ldr	r0, [pc, #176]	@ (8001ae8 <main+0x2f0>)
 8001a38:	f001 f8be 	bl	8002bb8 <HAL_ADC_Stop>

      HAL_Delay(100); // 100ms bekleme
 8001a3c:	2064      	movs	r0, #100	@ 0x64
 8001a3e:	f000 ff81 	bl	8002944 <HAL_Delay>



      float ax, ay, az;
      uint32_t soil_moisture;
      MPU6050_2_Read_Accel(&ax, &ay, &az);
 8001a42:	463a      	mov	r2, r7
 8001a44:	1d39      	adds	r1, r7, #4
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fd54 	bl	80014f8 <MPU6050_2_Read_Accel>
      float total_accel = sqrt(ax*ax + ay*ay + az*az);
 8001a50:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a54:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a6c:	edd7 6a00 	vldr	s13, [r7]
 8001a70:	edd7 7a00 	vldr	s15, [r7]
 8001a74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7c:	ee17 0a90 	vmov	r0, s15
 8001a80:	f7fe fd06 	bl	8000490 <__aeabi_f2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	ec43 2b10 	vmov	d0, r2, r3
 8001a8c:	f004 f998 	bl	8005dc0 <sqrt>
 8001a90:	ec53 2b10 	vmov	r2, r3, d0
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7ff f802 	bl	8000aa0 <__aeabi_d2f>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	63bb      	str	r3, [r7, #56]	@ 0x38

      if (total_accel > EARTHQUAKE_THRESHOLD) {
 8001aa0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001aa4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	dd32      	ble.n	8001b18 <main+0x320>
          earthquake_detected = 1;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	@ (8001b10 <main+0x318>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);  // Earthquake LED
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001abe:	4815      	ldr	r0, [pc, #84]	@ (8001b14 <main+0x31c>)
 8001ac0:	f001 fdfe 	bl	80036c0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);  // Earthquake Buzzer
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001aca:	4812      	ldr	r0, [pc, #72]	@ (8001b14 <main+0x31c>)
 8001acc:	f001 fdf8 	bl	80036c0 <HAL_GPIO_WritePin>
 8001ad0:	e035      	b.n	8001b3e <main+0x346>
 8001ad2:	bf00      	nop
 8001ad4:	e000edf0 	.word	0xe000edf0
 8001ad8:	e0001000 	.word	0xe0001000
 8001adc:	20000260 	.word	0x20000260
 8001ae0:	2000020c 	.word	0x2000020c
 8001ae4:	200001c4 	.word	0x200001c4
 8001ae8:	2000008c 	.word	0x2000008c
 8001aec:	20000254 	.word	0x20000254
 8001af0:	2000029e 	.word	0x2000029e
 8001af4:	200002a0 	.word	0x200002a0
 8001af8:	40020800 	.word	0x40020800
 8001afc:	200002a8 	.word	0x200002a8
 8001b00:	200002a4 	.word	0x200002a4
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	200002ac 	.word	0x200002ac
 8001b14:	40020c00 	.word	0x40020c00
      }
      else if (earthquake_detected) {
 8001b18:	4b5a      	ldr	r3, [pc, #360]	@ (8001c84 <main+0x48c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00e      	beq.n	8001b3e <main+0x346>
          earthquake_detected = 0;
 8001b20:	4b58      	ldr	r3, [pc, #352]	@ (8001c84 <main+0x48c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b2c:	4856      	ldr	r0, [pc, #344]	@ (8001c88 <main+0x490>)
 8001b2e:	f001 fdc7 	bl	80036c0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b38:	4853      	ldr	r0, [pc, #332]	@ (8001c88 <main+0x490>)
 8001b3a:	f001 fdc1 	bl	80036c0 <HAL_GPIO_WritePin>
      }
      HAL_ADC_Stop(&hadc1); // Önce ADC'yi durdur
 8001b3e:	4853      	ldr	r0, [pc, #332]	@ (8001c8c <main+0x494>)
 8001b40:	f001 f83a 	bl	8002bb8 <HAL_ADC_Stop>
               sConfig.Channel = ADC_CHANNEL_0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
               sConfig.Rank = 1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	613b      	str	r3, [r7, #16]
               sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	617b      	str	r3, [r7, #20]
               HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	484d      	ldr	r0, [pc, #308]	@ (8001c8c <main+0x494>)
 8001b58:	f001 f8fa 	bl	8002d50 <HAL_ADC_ConfigChannel>
               HAL_ADC_Start(&hadc1);
 8001b5c:	484b      	ldr	r0, [pc, #300]	@ (8001c8c <main+0x494>)
 8001b5e:	f000 ff59 	bl	8002a14 <HAL_ADC_Start>
      // 2. Soil Moisture Monitoring System
     soil_moisture = Read_Soil_Sensor();
 8001b62:	f7ff fd2d 	bl	80015c0 <Read_Soil_Sensor>
 8001b66:	6378      	str	r0, [r7, #52]	@ 0x34
      if (soil_moisture > SOIL_THRESHOLD) {
 8001b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b6a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b6e:	d90a      	bls.n	8001b86 <main+0x38e>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);   // Moisture LED
 8001b70:	2201      	movs	r2, #1
 8001b72:	2110      	movs	r1, #16
 8001b74:	4846      	ldr	r0, [pc, #280]	@ (8001c90 <main+0x498>)
 8001b76:	f001 fda3 	bl	80036c0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);   // Moisture Buzzer
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	4844      	ldr	r0, [pc, #272]	@ (8001c90 <main+0x498>)
 8001b80:	f001 fd9e 	bl	80036c0 <HAL_GPIO_WritePin>
 8001b84:	e009      	b.n	8001b9a <main+0x3a2>
      }
      else {
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2110      	movs	r1, #16
 8001b8a:	4841      	ldr	r0, [pc, #260]	@ (8001c90 <main+0x498>)
 8001b8c:	f001 fd98 	bl	80036c0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2120      	movs	r1, #32
 8001b94:	483e      	ldr	r0, [pc, #248]	@ (8001c90 <main+0x498>)
 8001b96:	f001 fd93 	bl	80036c0 <HAL_GPIO_WritePin>
      }

      // 3. Trash Bin Level Detection System
      float distance = get_distance_no_timer();
 8001b9a:	f7ff fd7d 	bl	8001698 <get_distance_no_timer>
 8001b9e:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
      if(distance > 0 && distance < FULL_DISTANCE) {
 8001ba2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	dd23      	ble.n	8001bf8 <main+0x400>
 8001bb0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001bb4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d51a      	bpl.n	8001bf8 <main+0x400>
          HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);  // Trash LED
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bc8:	482f      	ldr	r0, [pc, #188]	@ (8001c88 <main+0x490>)
 8001bca:	f001 fd79 	bl	80036c0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET); // Trash Buzzer
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bd4:	482c      	ldr	r0, [pc, #176]	@ (8001c88 <main+0x490>)
 8001bd6:	f001 fd73 	bl	80036c0 <HAL_GPIO_WritePin>
          HAL_Delay(500);
 8001bda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bde:	f000 feb1 	bl	8002944 <HAL_Delay>
          HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001be8:	4827      	ldr	r0, [pc, #156]	@ (8001c88 <main+0x490>)
 8001bea:	f001 fd69 	bl	80036c0 <HAL_GPIO_WritePin>
          HAL_Delay(500);
 8001bee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bf2:	f000 fea7 	bl	8002944 <HAL_Delay>
 8001bf6:	e00b      	b.n	8001c10 <main+0x418>
      }
      else {
          HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bfe:	4822      	ldr	r0, [pc, #136]	@ (8001c88 <main+0x490>)
 8001c00:	f001 fd5e 	bl	80036c0 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c0a:	481f      	ldr	r0, [pc, #124]	@ (8001c88 <main+0x490>)
 8001c0c:	f001 fd58 	bl	80036c0 <HAL_GPIO_WritePin>
      }

      // 4. Lighting Control System
      uint16_t ldrValue = Read_ADC(&hadc2); // LDR değerini oku
 8001c10:	4820      	ldr	r0, [pc, #128]	@ (8001c94 <main+0x49c>)
 8001c12:	f7ff fdc9 	bl	80017a8 <Read_ADC>
 8001c16:	4603      	mov	r3, r0
 8001c18:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      uint8_t currentPIRState = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14); // PIR durumunu oku
 8001c1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c1e:	481e      	ldr	r0, [pc, #120]	@ (8001c98 <main+0x4a0>)
 8001c20:	f001 fd36 	bl	8003690 <HAL_GPIO_ReadPin>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
      uint32_t currentTime = HAL_GetTick();
 8001c2a:	f000 fe7f 	bl	800292c <HAL_GetTick>
 8001c2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      // DEBUG için seri port çıktısı (HAL_UART kullanarak)
      // printf("LDR: %d, PIR: %d\n", ldrValue, currentPIRState);

      // SADECE karanlıkta VE hareket varsa LED'i yak
      if (ldrValue < LDR_THRESHOLD && currentPIRState == GPIO_PIN_SET) {
 8001c30:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001c32:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c36:	d20d      	bcs.n	8001c54 <main+0x45c>
 8001c38:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d109      	bne.n	8001c54 <main+0x45c>
          HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET); // LED ON
 8001c40:	2201      	movs	r2, #1
 8001c42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c46:	4814      	ldr	r0, [pc, #80]	@ (8001c98 <main+0x4a0>)
 8001c48:	f001 fd3a 	bl	80036c0 <HAL_GPIO_WritePin>
          motionDetectedTime = currentTime; // Zamanı güncelle
 8001c4c:	4a13      	ldr	r2, [pc, #76]	@ (8001c9c <main+0x4a4>)
 8001c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e005      	b.n	8001c60 <main+0x468>
      }
      // Diğer tüm durumlarda LED'i söndür
      else {
          HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET); // LED OFF
 8001c54:	2200      	movs	r2, #0
 8001c56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c5a:	480f      	ldr	r0, [pc, #60]	@ (8001c98 <main+0x4a0>)
 8001c5c:	f001 fd30 	bl	80036c0 <HAL_GPIO_WritePin>
      }
      // Timeout kontrolü (opsiyonel, 15 saniye sonra LED'i söndürür)
      if (currentTime - motionDetectedTime >= TIMEOUT_DURATION) {
 8001c60:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <main+0x4a4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d905      	bls.n	8001c7c <main+0x484>
          HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c76:	4808      	ldr	r0, [pc, #32]	@ (8001c98 <main+0x4a0>)
 8001c78:	f001 fd22 	bl	80036c0 <HAL_GPIO_WritePin>
      }
      HAL_Delay(100); // Common delay for all systems
 8001c7c:	2064      	movs	r0, #100	@ 0x64
 8001c7e:	f000 fe61 	bl	8002944 <HAL_Delay>
  { // MPU6050 işlemleri
 8001c82:	e5f6      	b.n	8001872 <main+0x7a>
 8001c84:	200002ac 	.word	0x200002ac
 8001c88:	40020c00 	.word	0x40020c00
 8001c8c:	2000008c 	.word	0x2000008c
 8001c90:	40020800 	.word	0x40020800
 8001c94:	200000d4 	.word	0x200000d4
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	200002b0 	.word	0x200002b0

08001ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b094      	sub	sp, #80	@ 0x50
 8001ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca6:	f107 0320 	add.w	r3, r7, #32
 8001caa:	2230      	movs	r2, #48	@ 0x30
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 f854 	bl	8005d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <SystemClock_Config+0xcc>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	4a27      	ldr	r2, [pc, #156]	@ (8001d6c <SystemClock_Config+0xcc>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd4:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <SystemClock_Config+0xcc>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	4b22      	ldr	r3, [pc, #136]	@ (8001d70 <SystemClock_Config+0xd0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a21      	ldr	r2, [pc, #132]	@ (8001d70 <SystemClock_Config+0xd0>)
 8001cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d70 <SystemClock_Config+0xd0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d06:	2302      	movs	r3, #2
 8001d08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d10:	2308      	movs	r3, #8
 8001d12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d14:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d22:	f107 0320 	add.w	r3, r7, #32
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 fd08 	bl	800473c <HAL_RCC_OscConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d32:	f000 fb0d 	bl	8002350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d36:	230f      	movs	r3, #15
 8001d38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	2105      	movs	r1, #5
 8001d54:	4618      	mov	r0, r3
 8001d56:	f002 ff69 	bl	8004c2c <HAL_RCC_ClockConfig>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d60:	f000 faf6 	bl	8002350 <Error_Handler>
  }
}
 8001d64:	bf00      	nop
 8001d66:	3750      	adds	r7, #80	@ 0x50
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40007000 	.word	0x40007000

08001d74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d86:	4b21      	ldr	r3, [pc, #132]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001d88:	4a21      	ldr	r2, [pc, #132]	@ (8001e10 <MX_ADC1_Init+0x9c>)
 8001d8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001d8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001da6:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dae:	4b17      	ldr	r3, [pc, #92]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001db4:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001db6:	4a17      	ldr	r2, [pc, #92]	@ (8001e14 <MX_ADC1_Init+0xa0>)
 8001db8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dba:	4b14      	ldr	r3, [pc, #80]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dce:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dd4:	480d      	ldr	r0, [pc, #52]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001dd6:	f000 fdd9 	bl	800298c <HAL_ADC_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001de0:	f000 fab6 	bl	8002350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001de4:	230d      	movs	r3, #13
 8001de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001dec:	2303      	movs	r3, #3
 8001dee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_ADC1_Init+0x98>)
 8001df6:	f000 ffab 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e00:	f000 faa6 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2000008c 	.word	0x2000008c
 8001e10:	40012000 	.word	0x40012000
 8001e14:	0f000001 	.word	0x0f000001

08001e18 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e1e:	463b      	mov	r3, r7
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001e2a:	4b21      	ldr	r3, [pc, #132]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e2c:	4a21      	ldr	r2, [pc, #132]	@ (8001eb4 <MX_ADC2_Init+0x9c>)
 8001e2e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e30:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e32:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e36:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e38:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001e44:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e4a:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e52:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e58:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e5a:	4a17      	ldr	r2, [pc, #92]	@ (8001eb8 <MX_ADC2_Init+0xa0>)
 8001e5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e5e:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001e64:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e72:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e78:	480d      	ldr	r0, [pc, #52]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e7a:	f000 fd87 	bl	800298c <HAL_ADC_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001e84:	f000 fa64 	bl	8002350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e88:	2305      	movs	r3, #5
 8001e8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001e90:	2307      	movs	r3, #7
 8001e92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e94:	463b      	mov	r3, r7
 8001e96:	4619      	mov	r1, r3
 8001e98:	4805      	ldr	r0, [pc, #20]	@ (8001eb0 <MX_ADC2_Init+0x98>)
 8001e9a:	f000 ff59 	bl	8002d50 <HAL_ADC_ConfigChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001ea4:	f000 fa54 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200000d4 	.word	0x200000d4
 8001eb4:	40012100 	.word	0x40012100
 8001eb8:	0f000001 	.word	0x0f000001

08001ebc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ec0:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ec2:	4a13      	ldr	r2, [pc, #76]	@ (8001f10 <MX_I2C1_Init+0x54>)
 8001ec4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ec8:	4a12      	ldr	r2, [pc, #72]	@ (8001f14 <MX_I2C1_Init+0x58>)
 8001eca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001eda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ede:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eec:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ef2:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ef8:	4804      	ldr	r0, [pc, #16]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001efa:	f001 fbfb 	bl	80036f4 <HAL_I2C_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f04:	f000 fa24 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	2000011c 	.word	0x2000011c
 8001f10:	40005400 	.word	0x40005400
 8001f14:	000186a0 	.word	0x000186a0

08001f18 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <MX_I2C3_Init+0x50>)
 8001f1e:	4a13      	ldr	r2, [pc, #76]	@ (8001f6c <MX_I2C3_Init+0x54>)
 8001f20:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <MX_I2C3_Init+0x50>)
 8001f24:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <MX_I2C3_Init+0x58>)
 8001f26:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <MX_I2C3_Init+0x50>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <MX_I2C3_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <MX_I2C3_Init+0x50>)
 8001f36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f3a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <MX_I2C3_Init+0x50>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <MX_I2C3_Init+0x50>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f48:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <MX_I2C3_Init+0x50>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <MX_I2C3_Init+0x50>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f54:	4804      	ldr	r0, [pc, #16]	@ (8001f68 <MX_I2C3_Init+0x50>)
 8001f56:	f001 fbcd 	bl	80036f4 <HAL_I2C_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f60:	f000 f9f6 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000170 	.word	0x20000170
 8001f6c:	40005c00 	.word	0x40005c00
 8001f70:	000186a0 	.word	0x000186a0

08001f74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08e      	sub	sp, #56	@ 0x38
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	f107 0320 	add.w	r3, r7, #32
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
 8001fa0:	615a      	str	r2, [r3, #20]
 8001fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800205c <MX_TIM2_Init+0xe8>)
 8001fa6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001faa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001fac:	4b2b      	ldr	r3, [pc, #172]	@ (800205c <MX_TIM2_Init+0xe8>)
 8001fae:	2253      	movs	r2, #83	@ 0x53
 8001fb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800205c <MX_TIM2_Init+0xe8>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001fb8:	4b28      	ldr	r3, [pc, #160]	@ (800205c <MX_TIM2_Init+0xe8>)
 8001fba:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001fbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc0:	4b26      	ldr	r3, [pc, #152]	@ (800205c <MX_TIM2_Init+0xe8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fc6:	4b25      	ldr	r3, [pc, #148]	@ (800205c <MX_TIM2_Init+0xe8>)
 8001fc8:	2280      	movs	r2, #128	@ 0x80
 8001fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fcc:	4823      	ldr	r0, [pc, #140]	@ (800205c <MX_TIM2_Init+0xe8>)
 8001fce:	f003 f839 	bl	8005044 <HAL_TIM_Base_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001fd8:	f000 f9ba 	bl	8002350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fe2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	481c      	ldr	r0, [pc, #112]	@ (800205c <MX_TIM2_Init+0xe8>)
 8001fea:	f003 fa5d 	bl	80054a8 <HAL_TIM_ConfigClockSource>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ff4:	f000 f9ac 	bl	8002350 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ff8:	4818      	ldr	r0, [pc, #96]	@ (800205c <MX_TIM2_Init+0xe8>)
 8001ffa:	f003 f872 	bl	80050e2 <HAL_TIM_PWM_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002004:	f000 f9a4 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002010:	f107 0320 	add.w	r3, r7, #32
 8002014:	4619      	mov	r1, r3
 8002016:	4811      	ldr	r0, [pc, #68]	@ (800205c <MX_TIM2_Init+0xe8>)
 8002018:	f003 fe24 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002022:	f000 f995 	bl	8002350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002026:	2360      	movs	r3, #96	@ 0x60
 8002028:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 800202a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800202e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	220c      	movs	r2, #12
 800203c:	4619      	mov	r1, r3
 800203e:	4807      	ldr	r0, [pc, #28]	@ (800205c <MX_TIM2_Init+0xe8>)
 8002040:	f003 f970 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800204a:	f000 f981 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800204e:	4803      	ldr	r0, [pc, #12]	@ (800205c <MX_TIM2_Init+0xe8>)
 8002050:	f000 fb12 	bl	8002678 <HAL_TIM_MspPostInit>

}
 8002054:	bf00      	nop
 8002056:	3738      	adds	r7, #56	@ 0x38
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	200001c4 	.word	0x200001c4

08002060 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08e      	sub	sp, #56	@ 0x38
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002066:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002074:	f107 0320 	add.w	r3, r7, #32
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
 800208c:	615a      	str	r2, [r3, #20]
 800208e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002090:	4b2d      	ldr	r3, [pc, #180]	@ (8002148 <MX_TIM3_Init+0xe8>)
 8002092:	4a2e      	ldr	r2, [pc, #184]	@ (800214c <MX_TIM3_Init+0xec>)
 8002094:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002096:	4b2c      	ldr	r3, [pc, #176]	@ (8002148 <MX_TIM3_Init+0xe8>)
 8002098:	2253      	movs	r2, #83	@ 0x53
 800209a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209c:	4b2a      	ldr	r3, [pc, #168]	@ (8002148 <MX_TIM3_Init+0xe8>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80020a2:	4b29      	ldr	r3, [pc, #164]	@ (8002148 <MX_TIM3_Init+0xe8>)
 80020a4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80020a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020aa:	4b27      	ldr	r3, [pc, #156]	@ (8002148 <MX_TIM3_Init+0xe8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020b0:	4b25      	ldr	r3, [pc, #148]	@ (8002148 <MX_TIM3_Init+0xe8>)
 80020b2:	2280      	movs	r2, #128	@ 0x80
 80020b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020b6:	4824      	ldr	r0, [pc, #144]	@ (8002148 <MX_TIM3_Init+0xe8>)
 80020b8:	f002 ffc4 	bl	8005044 <HAL_TIM_Base_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80020c2:	f000 f945 	bl	8002350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020d0:	4619      	mov	r1, r3
 80020d2:	481d      	ldr	r0, [pc, #116]	@ (8002148 <MX_TIM3_Init+0xe8>)
 80020d4:	f003 f9e8 	bl	80054a8 <HAL_TIM_ConfigClockSource>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80020de:	f000 f937 	bl	8002350 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020e2:	4819      	ldr	r0, [pc, #100]	@ (8002148 <MX_TIM3_Init+0xe8>)
 80020e4:	f002 fffd 	bl	80050e2 <HAL_TIM_PWM_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80020ee:	f000 f92f 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020fa:	f107 0320 	add.w	r3, r7, #32
 80020fe:	4619      	mov	r1, r3
 8002100:	4811      	ldr	r0, [pc, #68]	@ (8002148 <MX_TIM3_Init+0xe8>)
 8002102:	f003 fdaf 	bl	8005c64 <HAL_TIMEx_MasterConfigSynchronization>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800210c:	f000 f920 	bl	8002350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002110:	2360      	movs	r3, #96	@ 0x60
 8002112:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8002114:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002118:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	2200      	movs	r2, #0
 8002126:	4619      	mov	r1, r3
 8002128:	4807      	ldr	r0, [pc, #28]	@ (8002148 <MX_TIM3_Init+0xe8>)
 800212a:	f003 f8fb 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002134:	f000 f90c 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002138:	4803      	ldr	r0, [pc, #12]	@ (8002148 <MX_TIM3_Init+0xe8>)
 800213a:	f000 fa9d 	bl	8002678 <HAL_TIM_MspPostInit>

}
 800213e:	bf00      	nop
 8002140:	3738      	adds	r7, #56	@ 0x38
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2000020c 	.word	0x2000020c
 800214c:	40000400 	.word	0x40000400

08002150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	@ 0x30
 8002154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	4b73      	ldr	r3, [pc, #460]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a72      	ldr	r2, [pc, #456]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 8002170:	f043 0310 	orr.w	r3, r3, #16
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b70      	ldr	r3, [pc, #448]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	4b6c      	ldr	r3, [pc, #432]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a6b      	ldr	r2, [pc, #428]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b69      	ldr	r3, [pc, #420]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	4b65      	ldr	r3, [pc, #404]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a64      	ldr	r2, [pc, #400]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 80021a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b62      	ldr	r3, [pc, #392]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b5e      	ldr	r3, [pc, #376]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	4b57      	ldr	r3, [pc, #348]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a56      	ldr	r2, [pc, #344]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b54      	ldr	r3, [pc, #336]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	4b50      	ldr	r3, [pc, #320]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4a4f      	ldr	r2, [pc, #316]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4b4d      	ldr	r3, [pc, #308]	@ (8002338 <MX_GPIO_Init+0x1e8>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_BLUE_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	f242 0110 	movw	r1, #8208	@ 0x2010
 8002214:	4849      	ldr	r0, [pc, #292]	@ (800233c <MX_GPIO_Init+0x1ec>)
 8002216:	f001 fa53 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|DHT11_DATA_Pin|GPIO_PIN_4
 800221a:	2200      	movs	r2, #0
 800221c:	f24c 4171 	movw	r1, #50289	@ 0xc471
 8002220:	4847      	ldr	r0, [pc, #284]	@ (8002340 <MX_GPIO_Init+0x1f0>)
 8002222:	f001 fa4d 	bl	80036c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|trig_Pin|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800222c:	4845      	ldr	r0, [pc, #276]	@ (8002344 <MX_GPIO_Init+0x1f4>)
 800222e:	f001 fa47 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|led_Pin|buzzer_Pin, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
 8002234:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002238:	4843      	ldr	r0, [pc, #268]	@ (8002348 <MX_GPIO_Init+0x1f8>)
 800223a:	f001 fa41 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	f44f 4104 	mov.w	r1, #33792	@ 0x8400
 8002244:	4841      	ldr	r0, [pc, #260]	@ (800234c <MX_GPIO_Init+0x1fc>)
 8002246:	f001 fa3b 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin PE13 */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|GPIO_PIN_13;
 800224a:	f242 0310 	movw	r3, #8208	@ 0x2010
 800224e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002250:	2301      	movs	r3, #1
 8002252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	4619      	mov	r1, r3
 8002262:	4836      	ldr	r0, [pc, #216]	@ (800233c <MX_GPIO_Init+0x1ec>)
 8002264:	f001 f878 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC4 PC5
                           trig_Pin PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
 8002268:	f24c 4370 	movw	r3, #50288	@ 0xc470
 800226c:	61fb      	str	r3, [r7, #28]
                          |trig_Pin|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226e:	2301      	movs	r3, #1
 8002270:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	482f      	ldr	r0, [pc, #188]	@ (8002340 <MX_GPIO_Init+0x1f0>)
 8002282:	f001 f869 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_DATA_Pin */
  GPIO_InitStruct.Pin = DHT11_DATA_Pin;
 8002286:	2301      	movs	r3, #1
 8002288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228a:	2301      	movs	r3, #1
 800228c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800228e:	2301      	movs	r3, #1
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002292:	2300      	movs	r3, #0
 8002294:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	4619      	mov	r1, r3
 800229c:	4828      	ldr	r0, [pc, #160]	@ (8002340 <MX_GPIO_Init+0x1f0>)
 800229e:	f001 f85b 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a8:	2300      	movs	r3, #0
 80022aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022ac:	2302      	movs	r3, #2
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b0:	f107 031c 	add.w	r3, r7, #28
 80022b4:	4619      	mov	r1, r3
 80022b6:	4821      	ldr	r0, [pc, #132]	@ (800233c <MX_GPIO_Init+0x1ec>)
 80022b8:	f001 f84e 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BUZZER_Pin;
 80022bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80022c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c2:	2301      	movs	r3, #1
 80022c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ce:	f107 031c 	add.w	r3, r7, #28
 80022d2:	4619      	mov	r1, r3
 80022d4:	481b      	ldr	r0, [pc, #108]	@ (8002344 <MX_GPIO_Init+0x1f4>)
 80022d6:	f001 f83f 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 led_Pin buzzer_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|led_Pin|buzzer_Pin;
 80022da:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80022de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e0:	2301      	movs	r3, #1
 80022e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4619      	mov	r1, r3
 80022f2:	4815      	ldr	r0, [pc, #84]	@ (8002348 <MX_GPIO_Init+0x1f8>)
 80022f4:	f001 f830 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pin : echo_Pin */
  GPIO_InitStruct.Pin = echo_Pin;
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fc:	2300      	movs	r3, #0
 80022fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002300:	2302      	movs	r3, #2
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(echo_GPIO_Port, &GPIO_InitStruct);
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	4619      	mov	r1, r3
 800230a:	480d      	ldr	r0, [pc, #52]	@ (8002340 <MX_GPIO_Init+0x1f0>)
 800230c:	f001 f824 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8002310:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8002314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002316:	2301      	movs	r3, #1
 8002318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002322:	f107 031c 	add.w	r3, r7, #28
 8002326:	4619      	mov	r1, r3
 8002328:	4808      	ldr	r0, [pc, #32]	@ (800234c <MX_GPIO_Init+0x1fc>)
 800232a:	f001 f815 	bl	8003358 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800232e:	bf00      	nop
 8002330:	3730      	adds	r7, #48	@ 0x30
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40021000 	.word	0x40021000
 8002340:	40020800 	.word	0x40020800
 8002344:	40020400 	.word	0x40020400
 8002348:	40020c00 	.word	0x40020c00
 800234c:	40020000 	.word	0x40020000

08002350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002354:	b672      	cpsid	i
}
 8002356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <Error_Handler+0x8>

0800235c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <HAL_MspInit+0x4c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	4a0f      	ldr	r2, [pc, #60]	@ (80023a8 <HAL_MspInit+0x4c>)
 800236c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002370:	6453      	str	r3, [r2, #68]	@ 0x44
 8002372:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <HAL_MspInit+0x4c>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <HAL_MspInit+0x4c>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	4a08      	ldr	r2, [pc, #32]	@ (80023a8 <HAL_MspInit+0x4c>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	@ 0x40
 800238e:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_MspInit+0x4c>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800

080023ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	@ 0x30
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3b      	ldr	r2, [pc, #236]	@ (80024b8 <HAL_ADC_MspInit+0x10c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d142      	bne.n	8002454 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	4b3a      	ldr	r3, [pc, #232]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	4a39      	ldr	r2, [pc, #228]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023de:	4b37      	ldr	r3, [pc, #220]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	4b33      	ldr	r3, [pc, #204]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a32      	ldr	r2, [pc, #200]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b30      	ldr	r3, [pc, #192]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	4b2c      	ldr	r3, [pc, #176]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	4a2b      	ldr	r2, [pc, #172]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6313      	str	r3, [r2, #48]	@ 0x30
 8002416:	4b29      	ldr	r3, [pc, #164]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002422:	2308      	movs	r3, #8
 8002424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002426:	2303      	movs	r3, #3
 8002428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	4619      	mov	r1, r3
 8002434:	4822      	ldr	r0, [pc, #136]	@ (80024c0 <HAL_ADC_MspInit+0x114>)
 8002436:	f000 ff8f 	bl	8003358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 800243a:	2381      	movs	r3, #129	@ 0x81
 800243c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800243e:	2303      	movs	r3, #3
 8002440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	4619      	mov	r1, r3
 800244c:	481d      	ldr	r0, [pc, #116]	@ (80024c4 <HAL_ADC_MspInit+0x118>)
 800244e:	f000 ff83 	bl	8003358 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002452:	e02c      	b.n	80024ae <HAL_ADC_MspInit+0x102>
  else if(hadc->Instance==ADC2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1b      	ldr	r2, [pc, #108]	@ (80024c8 <HAL_ADC_MspInit+0x11c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d127      	bne.n	80024ae <HAL_ADC_MspInit+0x102>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	4b16      	ldr	r3, [pc, #88]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	4a15      	ldr	r2, [pc, #84]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 8002468:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800246c:	6453      	str	r3, [r2, #68]	@ 0x44
 800246e:	4b13      	ldr	r3, [pc, #76]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	4a0e      	ldr	r2, [pc, #56]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6313      	str	r3, [r2, #48]	@ 0x30
 800248a:	4b0c      	ldr	r3, [pc, #48]	@ (80024bc <HAL_ADC_MspInit+0x110>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002496:	2320      	movs	r3, #32
 8002498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800249a:	2303      	movs	r3, #3
 800249c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	4806      	ldr	r0, [pc, #24]	@ (80024c4 <HAL_ADC_MspInit+0x118>)
 80024aa:	f000 ff55 	bl	8003358 <HAL_GPIO_Init>
}
 80024ae:	bf00      	nop
 80024b0:	3730      	adds	r7, #48	@ 0x30
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40012000 	.word	0x40012000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40012100 	.word	0x40012100

080024cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08c      	sub	sp, #48	@ 0x30
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 031c 	add.w	r3, r7, #28
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a42      	ldr	r2, [pc, #264]	@ (80025f4 <HAL_I2C_MspInit+0x128>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d12c      	bne.n	8002548 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	4b41      	ldr	r3, [pc, #260]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	4a40      	ldr	r2, [pc, #256]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fe:	4b3e      	ldr	r3, [pc, #248]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800250a:	23c0      	movs	r3, #192	@ 0xc0
 800250c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250e:	2312      	movs	r3, #18
 8002510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800251a:	2304      	movs	r3, #4
 800251c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251e:	f107 031c 	add.w	r3, r7, #28
 8002522:	4619      	mov	r1, r3
 8002524:	4835      	ldr	r0, [pc, #212]	@ (80025fc <HAL_I2C_MspInit+0x130>)
 8002526:	f000 ff17 	bl	8003358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	4b32      	ldr	r3, [pc, #200]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	4a31      	ldr	r2, [pc, #196]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 8002534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002538:	6413      	str	r3, [r2, #64]	@ 0x40
 800253a:	4b2f      	ldr	r3, [pc, #188]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002546:	e050      	b.n	80025ea <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2c      	ldr	r2, [pc, #176]	@ (8002600 <HAL_I2C_MspInit+0x134>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d14b      	bne.n	80025ea <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b28      	ldr	r3, [pc, #160]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	4a27      	ldr	r2, [pc, #156]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	6313      	str	r3, [r2, #48]	@ 0x30
 8002562:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b21      	ldr	r3, [pc, #132]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a20      	ldr	r2, [pc, #128]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b1e      	ldr	r3, [pc, #120]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800258a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800258e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002590:	2312      	movs	r3, #18
 8002592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800259c:	2304      	movs	r3, #4
 800259e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	4619      	mov	r1, r3
 80025a6:	4817      	ldr	r0, [pc, #92]	@ (8002604 <HAL_I2C_MspInit+0x138>)
 80025a8:	f000 fed6 	bl	8003358 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b2:	2312      	movs	r3, #18
 80025b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ba:	2303      	movs	r3, #3
 80025bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025be:	2304      	movs	r3, #4
 80025c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c2:	f107 031c 	add.w	r3, r7, #28
 80025c6:	4619      	mov	r1, r3
 80025c8:	480f      	ldr	r0, [pc, #60]	@ (8002608 <HAL_I2C_MspInit+0x13c>)
 80025ca:	f000 fec5 	bl	8003358 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	4a08      	ldr	r2, [pc, #32]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 80025d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_I2C_MspInit+0x12c>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
}
 80025ea:	bf00      	nop
 80025ec:	3730      	adds	r7, #48	@ 0x30
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40005400 	.word	0x40005400
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40020400 	.word	0x40020400
 8002600:	40005c00 	.word	0x40005c00
 8002604:	40020800 	.word	0x40020800
 8002608:	40020000 	.word	0x40020000

0800260c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800261c:	d10e      	bne.n	800263c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b13      	ldr	r3, [pc, #76]	@ (8002670 <HAL_TIM_Base_MspInit+0x64>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	4a12      	ldr	r2, [pc, #72]	@ (8002670 <HAL_TIM_Base_MspInit+0x64>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6413      	str	r3, [r2, #64]	@ 0x40
 800262e:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <HAL_TIM_Base_MspInit+0x64>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800263a:	e012      	b.n	8002662 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0c      	ldr	r2, [pc, #48]	@ (8002674 <HAL_TIM_Base_MspInit+0x68>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d10d      	bne.n	8002662 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_TIM_Base_MspInit+0x64>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	4a08      	ldr	r2, [pc, #32]	@ (8002670 <HAL_TIM_Base_MspInit+0x64>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	6413      	str	r3, [r2, #64]	@ 0x40
 8002656:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <HAL_TIM_Base_MspInit+0x64>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40000400 	.word	0x40000400

08002678 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	@ 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002698:	d11f      	bne.n	80026da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <HAL_TIM_MspPostInit+0xb0>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4a21      	ldr	r2, [pc, #132]	@ (8002728 <HAL_TIM_MspPostInit+0xb0>)
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <HAL_TIM_MspPostInit+0xb0>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80026b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	2300      	movs	r3, #0
 80026c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026c8:	2301      	movs	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4619      	mov	r1, r3
 80026d2:	4816      	ldr	r0, [pc, #88]	@ (800272c <HAL_TIM_MspPostInit+0xb4>)
 80026d4:	f000 fe40 	bl	8003358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026d8:	e022      	b.n	8002720 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a14      	ldr	r2, [pc, #80]	@ (8002730 <HAL_TIM_MspPostInit+0xb8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d11d      	bne.n	8002720 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002728 <HAL_TIM_MspPostInit+0xb0>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002728 <HAL_TIM_MspPostInit+0xb0>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <HAL_TIM_MspPostInit+0xb0>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002700:	2340      	movs	r3, #64	@ 0x40
 8002702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	2300      	movs	r3, #0
 800270e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002710:	2302      	movs	r3, #2
 8002712:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	4619      	mov	r1, r3
 800271a:	4806      	ldr	r0, [pc, #24]	@ (8002734 <HAL_TIM_MspPostInit+0xbc>)
 800271c:	f000 fe1c 	bl	8003358 <HAL_GPIO_Init>
}
 8002720:	bf00      	nop
 8002722:	3728      	adds	r7, #40	@ 0x28
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	40020400 	.word	0x40020400
 8002730:	40000400 	.word	0x40000400
 8002734:	40020000 	.word	0x40020000

08002738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <NMI_Handler+0x4>

08002740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <HardFault_Handler+0x4>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <MemManage_Handler+0x4>

08002750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <BusFault_Handler+0x4>

08002758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <UsageFault_Handler+0x4>

08002760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800278e:	f000 f8b9 	bl	8002904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <SystemInit+0x20>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a2:	4a05      	ldr	r2, [pc, #20]	@ (80027b8 <SystemInit+0x20>)
 80027a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <HAL_Delay_us>:
 */

#include "us_delay.h"

void HAL_Delay_us(uint16_t us)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	80fb      	strh	r3, [r7, #6]
    uint32_t start = DWT->CYCCNT;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002800 <HAL_Delay_us+0x44>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	60fb      	str	r3, [r7, #12]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 80027cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002804 <HAL_Delay_us+0x48>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002808 <HAL_Delay_us+0x4c>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	0c9b      	lsrs	r3, r3, #18
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 80027e0:	bf00      	nop
 80027e2:	4b07      	ldr	r3, [pc, #28]	@ (8002800 <HAL_Delay_us+0x44>)
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d8f8      	bhi.n	80027e2 <HAL_Delay_us+0x26>
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e0001000 	.word	0xe0001000
 8002804:	20000000 	.word	0x20000000
 8002808:	431bde83 	.word	0x431bde83

0800280c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800280c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002844 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002810:	f7ff ffc2 	bl	8002798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002814:	480c      	ldr	r0, [pc, #48]	@ (8002848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002816:	490d      	ldr	r1, [pc, #52]	@ (800284c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002818:	4a0d      	ldr	r2, [pc, #52]	@ (8002850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800281c:	e002      	b.n	8002824 <LoopCopyDataInit>

0800281e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002822:	3304      	adds	r3, #4

08002824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002828:	d3f9      	bcc.n	800281e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282a:	4a0a      	ldr	r2, [pc, #40]	@ (8002854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800282c:	4c0a      	ldr	r4, [pc, #40]	@ (8002858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002830:	e001      	b.n	8002836 <LoopFillZerobss>

08002832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002834:	3204      	adds	r2, #4

08002836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002838:	d3fb      	bcc.n	8002832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800283a:	f003 fa9d 	bl	8005d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800283e:	f7fe ffdb 	bl	80017f8 <main>
  bx  lr    
 8002842:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800284c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002850:	0800600c 	.word	0x0800600c
  ldr r2, =_sbss
 8002854:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002858:	200003f0 	.word	0x200003f0

0800285c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800285c:	e7fe      	b.n	800285c <ADC_IRQHandler>
	...

08002860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002864:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0d      	ldr	r2, [pc, #52]	@ (80028a0 <HAL_Init+0x40>)
 800286a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800286e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_Init+0x40>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <HAL_Init+0x40>)
 8002876:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800287a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800287c:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <HAL_Init+0x40>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a07      	ldr	r2, [pc, #28]	@ (80028a0 <HAL_Init+0x40>)
 8002882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002888:	2003      	movs	r0, #3
 800288a:	f000 fd31 	bl	80032f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800288e:	200f      	movs	r0, #15
 8002890:	f000 f808 	bl	80028a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002894:	f7ff fd62 	bl	800235c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023c00 	.word	0x40023c00

080028a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ac:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <HAL_InitTick+0x54>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b12      	ldr	r3, [pc, #72]	@ (80028fc <HAL_InitTick+0x58>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fd3b 	bl	800333e <HAL_SYSTICK_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00e      	b.n	80028f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0f      	cmp	r3, #15
 80028d6:	d80a      	bhi.n	80028ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d8:	2200      	movs	r2, #0
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f000 fd11 	bl	8003306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e4:	4a06      	ldr	r2, [pc, #24]	@ (8002900 <HAL_InitTick+0x5c>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000000 	.word	0x20000000
 80028fc:	20000008 	.word	0x20000008
 8002900:	20000004 	.word	0x20000004

08002904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002908:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_IncTick+0x20>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_IncTick+0x24>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4413      	add	r3, r2
 8002914:	4a04      	ldr	r2, [pc, #16]	@ (8002928 <HAL_IncTick+0x24>)
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000008 	.word	0x20000008
 8002928:	200002b4 	.word	0x200002b4

0800292c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return uwTick;
 8002930:	4b03      	ldr	r3, [pc, #12]	@ (8002940 <HAL_GetTick+0x14>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	200002b4 	.word	0x200002b4

08002944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff ffee 	bl	800292c <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d005      	beq.n	800296a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295e:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <HAL_Delay+0x44>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800296a:	bf00      	nop
 800296c:	f7ff ffde 	bl	800292c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d8f7      	bhi.n	800296c <HAL_Delay+0x28>
  {
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000008 	.word	0x20000008

0800298c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e033      	b.n	8002a0a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fcfe 	bl	80023ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d118      	bne.n	80029fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029d2:	f023 0302 	bic.w	r3, r3, #2
 80029d6:	f043 0202 	orr.w	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fad8 	bl	8002f94 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f023 0303 	bic.w	r3, r3, #3
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80029fa:	e001      	b.n	8002a00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_Start+0x1a>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e0b2      	b.n	8002b94 <HAL_ADC_Start+0x180>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d018      	beq.n	8002a76 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a54:	4b52      	ldr	r3, [pc, #328]	@ (8002ba0 <HAL_ADC_Start+0x18c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a52      	ldr	r2, [pc, #328]	@ (8002ba4 <HAL_ADC_Start+0x190>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0c9a      	lsrs	r2, r3, #18
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002a68:	e002      	b.n	8002a70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f9      	bne.n	8002a6a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d17a      	bne.n	8002b7a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002aae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac2:	d106      	bne.n	8002ad2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac8:	f023 0206 	bic.w	r2, r3, #6
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ad0:	e002      	b.n	8002ad8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae0:	4b31      	ldr	r3, [pc, #196]	@ (8002ba8 <HAL_ADC_Start+0x194>)
 8002ae2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002aec:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d12a      	bne.n	8002b50 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2b      	ldr	r2, [pc, #172]	@ (8002bac <HAL_ADC_Start+0x198>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d015      	beq.n	8002b30 <HAL_ADC_Start+0x11c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a29      	ldr	r2, [pc, #164]	@ (8002bb0 <HAL_ADC_Start+0x19c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d105      	bne.n	8002b1a <HAL_ADC_Start+0x106>
 8002b0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ba8 <HAL_ADC_Start+0x194>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a25      	ldr	r2, [pc, #148]	@ (8002bb4 <HAL_ADC_Start+0x1a0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d136      	bne.n	8002b92 <HAL_ADC_Start+0x17e>
 8002b24:	4b20      	ldr	r3, [pc, #128]	@ (8002ba8 <HAL_ADC_Start+0x194>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d130      	bne.n	8002b92 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d129      	bne.n	8002b92 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	e020      	b.n	8002b92 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a15      	ldr	r2, [pc, #84]	@ (8002bac <HAL_ADC_Start+0x198>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d11b      	bne.n	8002b92 <HAL_ADC_Start+0x17e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d114      	bne.n	8002b92 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	e00b      	b.n	8002b92 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	f043 0201 	orr.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	431bde83 	.word	0x431bde83
 8002ba8:	40012300 	.word	0x40012300
 8002bac:	40012000 	.word	0x40012000
 8002bb0:	40012100 	.word	0x40012100
 8002bb4:	40012200 	.word	0x40012200

08002bb8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_ADC_Stop+0x16>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e021      	b.n	8002c12 <HAL_ADC_Stop+0x5a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	f043 0201 	orr.w	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3a:	d113      	bne.n	8002c64 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c4a:	d10b      	bne.n	8002c64 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	f043 0220 	orr.w	r2, r3, #32
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e063      	b.n	8002d2c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c64:	f7ff fe62 	bl	800292c <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c6a:	e021      	b.n	8002cb0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c72:	d01d      	beq.n	8002cb0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <HAL_ADC_PollForConversion+0x6c>
 8002c7a:	f7ff fe57 	bl	800292c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d212      	bcs.n	8002cb0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d00b      	beq.n	8002cb0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e03d      	b.n	8002d2c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d1d6      	bne.n	8002c6c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f06f 0212 	mvn.w	r2, #18
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d123      	bne.n	8002d2a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11f      	bne.n	8002d2a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d006      	beq.n	8002d06 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d111      	bne.n	8002d2a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1c>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e105      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x228>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b09      	cmp	r3, #9
 8002d7a:	d925      	bls.n	8002dc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68d9      	ldr	r1, [r3, #12]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	3b1e      	subs	r3, #30
 8002d92:	2207      	movs	r2, #7
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	400a      	ands	r2, r1
 8002da0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68d9      	ldr	r1, [r3, #12]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	4618      	mov	r0, r3
 8002db4:	4603      	mov	r3, r0
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4403      	add	r3, r0
 8002dba:	3b1e      	subs	r3, #30
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	e022      	b.n	8002e0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6919      	ldr	r1, [r3, #16]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	2207      	movs	r2, #7
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43da      	mvns	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	400a      	ands	r2, r1
 8002dea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6919      	ldr	r1, [r3, #16]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4403      	add	r3, r0
 8002e04:	409a      	lsls	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d824      	bhi.n	8002e60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	3b05      	subs	r3, #5
 8002e28:	221f      	movs	r2, #31
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	400a      	ands	r2, r1
 8002e36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	4618      	mov	r0, r3
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	3b05      	subs	r3, #5
 8002e52:	fa00 f203 	lsl.w	r2, r0, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e5e:	e04c      	b.n	8002efa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b0c      	cmp	r3, #12
 8002e66:	d824      	bhi.n	8002eb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	3b23      	subs	r3, #35	@ 0x23
 8002e7a:	221f      	movs	r2, #31
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43da      	mvns	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	400a      	ands	r2, r1
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	4618      	mov	r0, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3b23      	subs	r3, #35	@ 0x23
 8002ea4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eb0:	e023      	b.n	8002efa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3b41      	subs	r3, #65	@ 0x41
 8002ec4:	221f      	movs	r2, #31
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	400a      	ands	r2, r1
 8002ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	3b41      	subs	r3, #65	@ 0x41
 8002eee:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002efa:	4b22      	ldr	r3, [pc, #136]	@ (8002f84 <HAL_ADC_ConfigChannel+0x234>)
 8002efc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a21      	ldr	r2, [pc, #132]	@ (8002f88 <HAL_ADC_ConfigChannel+0x238>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d109      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x1cc>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b12      	cmp	r3, #18
 8002f0e:	d105      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a19      	ldr	r2, [pc, #100]	@ (8002f88 <HAL_ADC_ConfigChannel+0x238>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d123      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x21e>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d003      	beq.n	8002f36 <HAL_ADC_ConfigChannel+0x1e6>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b11      	cmp	r3, #17
 8002f34:	d11b      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d111      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f4a:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <HAL_ADC_ConfigChannel+0x23c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a10      	ldr	r2, [pc, #64]	@ (8002f90 <HAL_ADC_ConfigChannel+0x240>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	0c9a      	lsrs	r2, r3, #18
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f60:	e002      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f9      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40012300 	.word	0x40012300
 8002f88:	40012000 	.word	0x40012000
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	431bde83 	.word	0x431bde83

08002f94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f9c:	4b79      	ldr	r3, [pc, #484]	@ (8003184 <ADC_Init+0x1f0>)
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	021a      	lsls	r2, r3, #8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800300e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6899      	ldr	r1, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003026:	4a58      	ldr	r2, [pc, #352]	@ (8003188 <ADC_Init+0x1f4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d022      	beq.n	8003072 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800303a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800305c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6899      	ldr	r1, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	e00f      	b.n	8003092 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003090:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0202 	bic.w	r2, r2, #2
 80030a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6899      	ldr	r1, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7e1b      	ldrb	r3, [r3, #24]
 80030ac:	005a      	lsls	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01b      	beq.n	80030f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80030de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6859      	ldr	r1, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	3b01      	subs	r3, #1
 80030ec:	035a      	lsls	r2, r3, #13
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	e007      	b.n	8003108 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003106:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003116:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	3b01      	subs	r3, #1
 8003124:	051a      	lsls	r2, r3, #20
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800313c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6899      	ldr	r1, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800314a:	025a      	lsls	r2, r3, #9
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6899      	ldr	r1, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	029a      	lsls	r2, r3, #10
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	609a      	str	r2, [r3, #8]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40012300 	.word	0x40012300
 8003188:	0f000001 	.word	0x0f000001

0800318c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800319c:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031a8:	4013      	ands	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031be:	4a04      	ldr	r2, [pc, #16]	@ (80031d0 <__NVIC_SetPriorityGrouping+0x44>)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	60d3      	str	r3, [r2, #12]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d8:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <__NVIC_GetPriorityGrouping+0x18>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	0a1b      	lsrs	r3, r3, #8
 80031de:	f003 0307 	and.w	r3, r3, #7
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003200:	2b00      	cmp	r3, #0
 8003202:	db0a      	blt.n	800321a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	490c      	ldr	r1, [pc, #48]	@ (800323c <__NVIC_SetPriority+0x4c>)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	0112      	lsls	r2, r2, #4
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	440b      	add	r3, r1
 8003214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003218:	e00a      	b.n	8003230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__NVIC_SetPriority+0x50>)
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	3b04      	subs	r3, #4
 8003228:	0112      	lsls	r2, r2, #4
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	440b      	add	r3, r1
 800322e:	761a      	strb	r2, [r3, #24]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000e100 	.word	0xe000e100
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	@ 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f1c3 0307 	rsb	r3, r3, #7
 800325e:	2b04      	cmp	r3, #4
 8003260:	bf28      	it	cs
 8003262:	2304      	movcs	r3, #4
 8003264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3304      	adds	r3, #4
 800326a:	2b06      	cmp	r3, #6
 800326c:	d902      	bls.n	8003274 <NVIC_EncodePriority+0x30>
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3b03      	subs	r3, #3
 8003272:	e000      	b.n	8003276 <NVIC_EncodePriority+0x32>
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	f04f 32ff 	mov.w	r2, #4294967295
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43da      	mvns	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	401a      	ands	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800328c:	f04f 31ff 	mov.w	r1, #4294967295
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43d9      	mvns	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800329c:	4313      	orrs	r3, r2
         );
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3724      	adds	r7, #36	@ 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032bc:	d301      	bcc.n	80032c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032be:	2301      	movs	r3, #1
 80032c0:	e00f      	b.n	80032e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032c2:	4a0a      	ldr	r2, [pc, #40]	@ (80032ec <SysTick_Config+0x40>)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ca:	210f      	movs	r1, #15
 80032cc:	f04f 30ff 	mov.w	r0, #4294967295
 80032d0:	f7ff ff8e 	bl	80031f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d4:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <SysTick_Config+0x40>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032da:	4b04      	ldr	r3, [pc, #16]	@ (80032ec <SysTick_Config+0x40>)
 80032dc:	2207      	movs	r2, #7
 80032de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	e000e010 	.word	0xe000e010

080032f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ff47 	bl	800318c <__NVIC_SetPriorityGrouping>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	4603      	mov	r3, r0
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003318:	f7ff ff5c 	bl	80031d4 <__NVIC_GetPriorityGrouping>
 800331c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	6978      	ldr	r0, [r7, #20]
 8003324:	f7ff ff8e 	bl	8003244 <NVIC_EncodePriority>
 8003328:	4602      	mov	r2, r0
 800332a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff5d 	bl	80031f0 <__NVIC_SetPriority>
}
 8003336:	bf00      	nop
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ffb0 	bl	80032ac <SysTick_Config>
 800334c:	4603      	mov	r3, r0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	@ 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	e16b      	b.n	800364c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003374:	2201      	movs	r2, #1
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	429a      	cmp	r2, r3
 800338e:	f040 815a 	bne.w	8003646 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d005      	beq.n	80033aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d130      	bne.n	800340c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	2203      	movs	r2, #3
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e0:	2201      	movs	r2, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 0201 	and.w	r2, r3, #1
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b03      	cmp	r3, #3
 8003416:	d017      	beq.n	8003448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d123      	bne.n	800349c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	08da      	lsrs	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3208      	adds	r2, #8
 800345c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	220f      	movs	r2, #15
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	08da      	lsrs	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3208      	adds	r2, #8
 8003496:	69b9      	ldr	r1, [r7, #24]
 8003498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2203      	movs	r2, #3
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0203 	and.w	r2, r3, #3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80b4 	beq.w	8003646 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	4b60      	ldr	r3, [pc, #384]	@ (8003664 <HAL_GPIO_Init+0x30c>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003664 <HAL_GPIO_Init+0x30c>)
 80034e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003664 <HAL_GPIO_Init+0x30c>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003668 <HAL_GPIO_Init+0x310>)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	3302      	adds	r3, #2
 8003502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	220f      	movs	r2, #15
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a52      	ldr	r2, [pc, #328]	@ (800366c <HAL_GPIO_Init+0x314>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d02b      	beq.n	800357e <HAL_GPIO_Init+0x226>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a51      	ldr	r2, [pc, #324]	@ (8003670 <HAL_GPIO_Init+0x318>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d025      	beq.n	800357a <HAL_GPIO_Init+0x222>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a50      	ldr	r2, [pc, #320]	@ (8003674 <HAL_GPIO_Init+0x31c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01f      	beq.n	8003576 <HAL_GPIO_Init+0x21e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a4f      	ldr	r2, [pc, #316]	@ (8003678 <HAL_GPIO_Init+0x320>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d019      	beq.n	8003572 <HAL_GPIO_Init+0x21a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4e      	ldr	r2, [pc, #312]	@ (800367c <HAL_GPIO_Init+0x324>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_GPIO_Init+0x216>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4d      	ldr	r2, [pc, #308]	@ (8003680 <HAL_GPIO_Init+0x328>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00d      	beq.n	800356a <HAL_GPIO_Init+0x212>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4c      	ldr	r2, [pc, #304]	@ (8003684 <HAL_GPIO_Init+0x32c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_GPIO_Init+0x20e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4b      	ldr	r2, [pc, #300]	@ (8003688 <HAL_GPIO_Init+0x330>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_GPIO_Init+0x20a>
 800355e:	2307      	movs	r3, #7
 8003560:	e00e      	b.n	8003580 <HAL_GPIO_Init+0x228>
 8003562:	2308      	movs	r3, #8
 8003564:	e00c      	b.n	8003580 <HAL_GPIO_Init+0x228>
 8003566:	2306      	movs	r3, #6
 8003568:	e00a      	b.n	8003580 <HAL_GPIO_Init+0x228>
 800356a:	2305      	movs	r3, #5
 800356c:	e008      	b.n	8003580 <HAL_GPIO_Init+0x228>
 800356e:	2304      	movs	r3, #4
 8003570:	e006      	b.n	8003580 <HAL_GPIO_Init+0x228>
 8003572:	2303      	movs	r3, #3
 8003574:	e004      	b.n	8003580 <HAL_GPIO_Init+0x228>
 8003576:	2302      	movs	r3, #2
 8003578:	e002      	b.n	8003580 <HAL_GPIO_Init+0x228>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_GPIO_Init+0x228>
 800357e:	2300      	movs	r3, #0
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	f002 0203 	and.w	r2, r2, #3
 8003586:	0092      	lsls	r2, r2, #2
 8003588:	4093      	lsls	r3, r2
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003590:	4935      	ldr	r1, [pc, #212]	@ (8003668 <HAL_GPIO_Init+0x310>)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	089b      	lsrs	r3, r3, #2
 8003596:	3302      	adds	r3, #2
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800359e:	4b3b      	ldr	r3, [pc, #236]	@ (800368c <HAL_GPIO_Init+0x334>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035c2:	4a32      	ldr	r2, [pc, #200]	@ (800368c <HAL_GPIO_Init+0x334>)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035c8:	4b30      	ldr	r3, [pc, #192]	@ (800368c <HAL_GPIO_Init+0x334>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035ec:	4a27      	ldr	r2, [pc, #156]	@ (800368c <HAL_GPIO_Init+0x334>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035f2:	4b26      	ldr	r3, [pc, #152]	@ (800368c <HAL_GPIO_Init+0x334>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003616:	4a1d      	ldr	r2, [pc, #116]	@ (800368c <HAL_GPIO_Init+0x334>)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800361c:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <HAL_GPIO_Init+0x334>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003640:	4a12      	ldr	r2, [pc, #72]	@ (800368c <HAL_GPIO_Init+0x334>)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3301      	adds	r3, #1
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b0f      	cmp	r3, #15
 8003650:	f67f ae90 	bls.w	8003374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	3724      	adds	r7, #36	@ 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	40013800 	.word	0x40013800
 800366c:	40020000 	.word	0x40020000
 8003670:	40020400 	.word	0x40020400
 8003674:	40020800 	.word	0x40020800
 8003678:	40020c00 	.word	0x40020c00
 800367c:	40021000 	.word	0x40021000
 8003680:	40021400 	.word	0x40021400
 8003684:	40021800 	.word	0x40021800
 8003688:	40021c00 	.word	0x40021c00
 800368c:	40013c00 	.word	0x40013c00

08003690 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	e001      	b.n	80036b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ae:	2300      	movs	r3, #0
 80036b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
 80036cc:	4613      	mov	r3, r2
 80036ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d0:	787b      	ldrb	r3, [r7, #1]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036d6:	887a      	ldrh	r2, [r7, #2]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036dc:	e003      	b.n	80036e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	041a      	lsls	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	619a      	str	r2, [r3, #24]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e12b      	b.n	800395e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fe fed6 	bl	80024cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	@ 0x24
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003758:	f001 fc60 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 800375c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4a81      	ldr	r2, [pc, #516]	@ (8003968 <HAL_I2C_Init+0x274>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d807      	bhi.n	8003778 <HAL_I2C_Init+0x84>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4a80      	ldr	r2, [pc, #512]	@ (800396c <HAL_I2C_Init+0x278>)
 800376c:	4293      	cmp	r3, r2
 800376e:	bf94      	ite	ls
 8003770:	2301      	movls	r3, #1
 8003772:	2300      	movhi	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e006      	b.n	8003786 <HAL_I2C_Init+0x92>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4a7d      	ldr	r2, [pc, #500]	@ (8003970 <HAL_I2C_Init+0x27c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	bf94      	ite	ls
 8003780:	2301      	movls	r3, #1
 8003782:	2300      	movhi	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0e7      	b.n	800395e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a78      	ldr	r2, [pc, #480]	@ (8003974 <HAL_I2C_Init+0x280>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0c9b      	lsrs	r3, r3, #18
 8003798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a6a      	ldr	r2, [pc, #424]	@ (8003968 <HAL_I2C_Init+0x274>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d802      	bhi.n	80037c8 <HAL_I2C_Init+0xd4>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	3301      	adds	r3, #1
 80037c6:	e009      	b.n	80037dc <HAL_I2C_Init+0xe8>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	4a69      	ldr	r2, [pc, #420]	@ (8003978 <HAL_I2C_Init+0x284>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	099b      	lsrs	r3, r3, #6
 80037da:	3301      	adds	r3, #1
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	495c      	ldr	r1, [pc, #368]	@ (8003968 <HAL_I2C_Init+0x274>)
 80037f8:	428b      	cmp	r3, r1
 80037fa:	d819      	bhi.n	8003830 <HAL_I2C_Init+0x13c>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e59      	subs	r1, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	fbb1 f3f3 	udiv	r3, r1, r3
 800380a:	1c59      	adds	r1, r3, #1
 800380c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003810:	400b      	ands	r3, r1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_I2C_Init+0x138>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1e59      	subs	r1, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fbb1 f3f3 	udiv	r3, r1, r3
 8003824:	3301      	adds	r3, #1
 8003826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382a:	e051      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 800382c:	2304      	movs	r3, #4
 800382e:	e04f      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d111      	bne.n	800385c <HAL_I2C_Init+0x168>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e58      	subs	r0, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	440b      	add	r3, r1
 8003846:	fbb0 f3f3 	udiv	r3, r0, r3
 800384a:	3301      	adds	r3, #1
 800384c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e012      	b.n	8003882 <HAL_I2C_Init+0x18e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e58      	subs	r0, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	0099      	lsls	r1, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003872:	3301      	adds	r3, #1
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Init+0x196>
 8003886:	2301      	movs	r3, #1
 8003888:	e022      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10e      	bne.n	80038b0 <HAL_I2C_Init+0x1bc>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1e58      	subs	r0, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	440b      	add	r3, r1
 80038a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ae:	e00f      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1e58      	subs	r0, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	0099      	lsls	r1, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c6:	3301      	adds	r3, #1
 80038c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	6809      	ldr	r1, [r1, #0]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6911      	ldr	r1, [r2, #16]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68d2      	ldr	r2, [r2, #12]
 800390a:	4311      	orrs	r1, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	430b      	orrs	r3, r1
 8003912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	000186a0 	.word	0x000186a0
 800396c:	001e847f 	.word	0x001e847f
 8003970:	003d08ff 	.word	0x003d08ff
 8003974:	431bde83 	.word	0x431bde83
 8003978:	10624dd3 	.word	0x10624dd3

0800397c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	4608      	mov	r0, r1
 8003986:	4611      	mov	r1, r2
 8003988:	461a      	mov	r2, r3
 800398a:	4603      	mov	r3, r0
 800398c:	817b      	strh	r3, [r7, #10]
 800398e:	460b      	mov	r3, r1
 8003990:	813b      	strh	r3, [r7, #8]
 8003992:	4613      	mov	r3, r2
 8003994:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003996:	f7fe ffc9 	bl	800292c <HAL_GetTick>
 800399a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	f040 80d9 	bne.w	8003b5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2319      	movs	r3, #25
 80039b0:	2201      	movs	r2, #1
 80039b2:	496d      	ldr	r1, [pc, #436]	@ (8003b68 <HAL_I2C_Mem_Write+0x1ec>)
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 fc8b 	bl	80042d0 <I2C_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
 80039c2:	e0cc      	b.n	8003b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_I2C_Mem_Write+0x56>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e0c5      	b.n	8003b5e <HAL_I2C_Mem_Write+0x1e2>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d007      	beq.n	80039f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2221      	movs	r2, #33	@ 0x21
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2240      	movs	r2, #64	@ 0x40
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4a4d      	ldr	r2, [pc, #308]	@ (8003b6c <HAL_I2C_Mem_Write+0x1f0>)
 8003a38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a3a:	88f8      	ldrh	r0, [r7, #6]
 8003a3c:	893a      	ldrh	r2, [r7, #8]
 8003a3e:	8979      	ldrh	r1, [r7, #10]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	4603      	mov	r3, r0
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 fac2 	bl	8003fd4 <I2C_RequestMemoryWrite>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d052      	beq.n	8003afc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e081      	b.n	8003b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 fd50 	bl	8004504 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00d      	beq.n	8003a86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d107      	bne.n	8003a82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e06b      	b.n	8003b5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	781a      	ldrb	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d11b      	bne.n	8003afc <HAL_I2C_Mem_Write+0x180>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d017      	beq.n	8003afc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1aa      	bne.n	8003a5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fd43 	bl	8004594 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d107      	bne.n	8003b2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e016      	b.n	8003b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	e000      	b.n	8003b5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b5c:	2302      	movs	r3, #2
  }
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	00100002 	.word	0x00100002
 8003b6c:	ffff0000 	.word	0xffff0000

08003b70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	@ 0x30
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	817b      	strh	r3, [r7, #10]
 8003b82:	460b      	mov	r3, r1
 8003b84:	813b      	strh	r3, [r7, #8]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b8a:	f7fe fecf 	bl	800292c <HAL_GetTick>
 8003b8e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	f040 8214 	bne.w	8003fc6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	2319      	movs	r3, #25
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	497b      	ldr	r1, [pc, #492]	@ (8003d94 <HAL_I2C_Mem_Read+0x224>)
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fb91 	bl	80042d0 <I2C_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e207      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_I2C_Mem_Read+0x56>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e200      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x458>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d007      	beq.n	8003bec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2222      	movs	r2, #34	@ 0x22
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2240      	movs	r2, #64	@ 0x40
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a5b      	ldr	r2, [pc, #364]	@ (8003d98 <HAL_I2C_Mem_Read+0x228>)
 8003c2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c2e:	88f8      	ldrh	r0, [r7, #6]
 8003c30:	893a      	ldrh	r2, [r7, #8]
 8003c32:	8979      	ldrh	r1, [r7, #10]
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fa5e 	bl	8004100 <I2C_RequestMemoryRead>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e1bc      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d113      	bne.n	8003c7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c56:	2300      	movs	r3, #0
 8003c58:	623b      	str	r3, [r7, #32]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	623b      	str	r3, [r7, #32]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	623b      	str	r3, [r7, #32]
 8003c6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e190      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d11b      	bne.n	8003cbe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e170      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d11b      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	e150      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d14:	e144      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	f200 80f1 	bhi.w	8003f02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d123      	bne.n	8003d70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fc79 	bl	8004624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e145      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d6e:	e117      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d14e      	bne.n	8003e16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7e:	2200      	movs	r2, #0
 8003d80:	4906      	ldr	r1, [pc, #24]	@ (8003d9c <HAL_I2C_Mem_Read+0x22c>)
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 faa4 	bl	80042d0 <I2C_WaitOnFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e11a      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x458>
 8003d92:	bf00      	nop
 8003d94:	00100002 	.word	0x00100002
 8003d98:	ffff0000 	.word	0xffff0000
 8003d9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e14:	e0c4      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	496c      	ldr	r1, [pc, #432]	@ (8003fd0 <HAL_I2C_Mem_Read+0x460>)
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fa55 	bl	80042d0 <I2C_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0cb      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4955      	ldr	r1, [pc, #340]	@ (8003fd0 <HAL_I2C_Mem_Read+0x460>)
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fa27 	bl	80042d0 <I2C_WaitOnFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e09d      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f00:	e04e      	b.n	8003fa0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fb8c 	bl	8004624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e058      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d124      	bne.n	8003fa0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d107      	bne.n	8003f6e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f6c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f47f aeb6 	bne.w	8003d16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e000      	b.n	8003fc8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
  }
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3728      	adds	r7, #40	@ 0x28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	00010004 	.word	0x00010004

08003fd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	4608      	mov	r0, r1
 8003fde:	4611      	mov	r1, r2
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	817b      	strh	r3, [r7, #10]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	813b      	strh	r3, [r7, #8]
 8003fea:	4613      	mov	r3, r2
 8003fec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ffc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	2200      	movs	r2, #0
 8004006:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f960 	bl	80042d0 <I2C_WaitOnFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00d      	beq.n	8004032 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004024:	d103      	bne.n	800402e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800402c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e05f      	b.n	80040f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004032:	897b      	ldrh	r3, [r7, #10]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004040:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	492d      	ldr	r1, [pc, #180]	@ (80040fc <I2C_RequestMemoryWrite+0x128>)
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 f9bb 	bl	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e04c      	b.n	80040f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800406e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004070:	6a39      	ldr	r1, [r7, #32]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 fa46 	bl	8004504 <I2C_WaitOnTXEFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00d      	beq.n	800409a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	2b04      	cmp	r3, #4
 8004084:	d107      	bne.n	8004096 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004094:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e02b      	b.n	80040f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d105      	bne.n	80040ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040a0:	893b      	ldrh	r3, [r7, #8]
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	611a      	str	r2, [r3, #16]
 80040aa:	e021      	b.n	80040f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040ac:	893b      	ldrh	r3, [r7, #8]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040bc:	6a39      	ldr	r1, [r7, #32]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 fa20 	bl	8004504 <I2C_WaitOnTXEFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00d      	beq.n	80040e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d107      	bne.n	80040e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e005      	b.n	80040f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040e6:	893b      	ldrh	r3, [r7, #8]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	00010002 	.word	0x00010002

08004100 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	4608      	mov	r0, r1
 800410a:	4611      	mov	r1, r2
 800410c:	461a      	mov	r2, r3
 800410e:	4603      	mov	r3, r0
 8004110:	817b      	strh	r3, [r7, #10]
 8004112:	460b      	mov	r3, r1
 8004114:	813b      	strh	r3, [r7, #8]
 8004116:	4613      	mov	r3, r2
 8004118:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004128:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004138:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	2200      	movs	r2, #0
 8004142:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f8c2 	bl	80042d0 <I2C_WaitOnFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004160:	d103      	bne.n	800416a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004168:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e0aa      	b.n	80042c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800416e:	897b      	ldrh	r3, [r7, #10]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800417c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	6a3a      	ldr	r2, [r7, #32]
 8004182:	4952      	ldr	r1, [pc, #328]	@ (80042cc <I2C_RequestMemoryRead+0x1cc>)
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f91d 	bl	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e097      	b.n	80042c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ac:	6a39      	ldr	r1, [r7, #32]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f9a8 	bl	8004504 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00d      	beq.n	80041d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d107      	bne.n	80041d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e076      	b.n	80042c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d105      	bne.n	80041e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041dc:	893b      	ldrh	r3, [r7, #8]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	611a      	str	r2, [r3, #16]
 80041e6:	e021      	b.n	800422c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041e8:	893b      	ldrh	r3, [r7, #8]
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f8:	6a39      	ldr	r1, [r7, #32]
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f982 	bl	8004504 <I2C_WaitOnTXEFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00d      	beq.n	8004222 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	2b04      	cmp	r3, #4
 800420c:	d107      	bne.n	800421e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800421c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e050      	b.n	80042c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004222:	893b      	ldrh	r3, [r7, #8]
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800422e:	6a39      	ldr	r1, [r7, #32]
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f967 	bl	8004504 <I2C_WaitOnTXEFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00d      	beq.n	8004258 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004240:	2b04      	cmp	r3, #4
 8004242:	d107      	bne.n	8004254 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004252:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e035      	b.n	80042c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004266:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	2200      	movs	r2, #0
 8004270:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f82b 	bl	80042d0 <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800428e:	d103      	bne.n	8004298 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004296:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e013      	b.n	80042c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800429c:	897b      	ldrh	r3, [r7, #10]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	6a3a      	ldr	r2, [r7, #32]
 80042b0:	4906      	ldr	r1, [pc, #24]	@ (80042cc <I2C_RequestMemoryRead+0x1cc>)
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f886 	bl	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	00010002 	.word	0x00010002

080042d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e0:	e048      	b.n	8004374 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d044      	beq.n	8004374 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fe fb1f 	bl	800292c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d139      	bne.n	8004374 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	0c1b      	lsrs	r3, r3, #16
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b01      	cmp	r3, #1
 8004308:	d10d      	bne.n	8004326 <I2C_WaitOnFlagUntilTimeout+0x56>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	43da      	mvns	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4013      	ands	r3, r2
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	e00c      	b.n	8004340 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	43da      	mvns	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4013      	ands	r3, r2
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	79fb      	ldrb	r3, [r7, #7]
 8004342:	429a      	cmp	r2, r3
 8004344:	d116      	bne.n	8004374 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e023      	b.n	80043bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	0c1b      	lsrs	r3, r3, #16
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10d      	bne.n	800439a <I2C_WaitOnFlagUntilTimeout+0xca>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	43da      	mvns	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4013      	ands	r3, r2
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	461a      	mov	r2, r3
 8004398:	e00c      	b.n	80043b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	43da      	mvns	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4013      	ands	r3, r2
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d093      	beq.n	80042e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043d2:	e071      	b.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e2:	d123      	bne.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	f043 0204 	orr.w	r2, r3, #4
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e067      	b.n	80044fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004432:	d041      	beq.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004434:	f7fe fa7a 	bl	800292c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	429a      	cmp	r2, r3
 8004442:	d302      	bcc.n	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d136      	bne.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d10c      	bne.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	43da      	mvns	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	bf14      	ite	ne
 8004466:	2301      	movne	r3, #1
 8004468:	2300      	moveq	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	e00b      	b.n	8004486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	43da      	mvns	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4013      	ands	r3, r2
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	bf14      	ite	ne
 8004480:	2301      	movne	r3, #1
 8004482:	2300      	moveq	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d016      	beq.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	f043 0220 	orr.w	r2, r3, #32
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e021      	b.n	80044fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	0c1b      	lsrs	r3, r3, #16
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d10c      	bne.n	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	43da      	mvns	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4013      	ands	r3, r2
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	e00b      	b.n	80044f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	43da      	mvns	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4013      	ands	r3, r2
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bf14      	ite	ne
 80044ee:	2301      	movne	r3, #1
 80044f0:	2300      	moveq	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f47f af6d 	bne.w	80043d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004510:	e034      	b.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f8e3 	bl	80046de <I2C_IsAcknowledgeFailed>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e034      	b.n	800458c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004528:	d028      	beq.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452a:	f7fe f9ff 	bl	800292c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	429a      	cmp	r2, r3
 8004538:	d302      	bcc.n	8004540 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d11d      	bne.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454a:	2b80      	cmp	r3, #128	@ 0x80
 800454c:	d016      	beq.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e007      	b.n	800458c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004586:	2b80      	cmp	r3, #128	@ 0x80
 8004588:	d1c3      	bne.n	8004512 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045a0:	e034      	b.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f89b 	bl	80046de <I2C_IsAcknowledgeFailed>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e034      	b.n	800461c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d028      	beq.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ba:	f7fe f9b7 	bl	800292c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11d      	bne.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d016      	beq.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f8:	f043 0220 	orr.w	r2, r3, #32
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e007      	b.n	800461c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b04      	cmp	r3, #4
 8004618:	d1c3      	bne.n	80045a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004630:	e049      	b.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b10      	cmp	r3, #16
 800463e:	d119      	bne.n	8004674 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0210 	mvn.w	r2, #16
 8004648:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e030      	b.n	80046d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004674:	f7fe f95a 	bl	800292c <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	429a      	cmp	r2, r3
 8004682:	d302      	bcc.n	800468a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d11d      	bne.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b40      	cmp	r3, #64	@ 0x40
 8004696:	d016      	beq.n	80046c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	f043 0220 	orr.w	r2, r3, #32
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e007      	b.n	80046d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d0:	2b40      	cmp	r3, #64	@ 0x40
 80046d2:	d1ae      	bne.n	8004632 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046f4:	d11b      	bne.n	800472e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	f043 0204 	orr.w	r2, r3, #4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e267      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d075      	beq.n	8004846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800475a:	4b88      	ldr	r3, [pc, #544]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	2b04      	cmp	r3, #4
 8004764:	d00c      	beq.n	8004780 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004766:	4b85      	ldr	r3, [pc, #532]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800476e:	2b08      	cmp	r3, #8
 8004770:	d112      	bne.n	8004798 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004772:	4b82      	ldr	r3, [pc, #520]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800477a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800477e:	d10b      	bne.n	8004798 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004780:	4b7e      	ldr	r3, [pc, #504]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d05b      	beq.n	8004844 <HAL_RCC_OscConfig+0x108>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d157      	bne.n	8004844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e242      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a0:	d106      	bne.n	80047b0 <HAL_RCC_OscConfig+0x74>
 80047a2:	4b76      	ldr	r3, [pc, #472]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a75      	ldr	r2, [pc, #468]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	e01d      	b.n	80047ec <HAL_RCC_OscConfig+0xb0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047b8:	d10c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x98>
 80047ba:	4b70      	ldr	r3, [pc, #448]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a6f      	ldr	r2, [pc, #444]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 80047c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	4b6d      	ldr	r3, [pc, #436]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a6c      	ldr	r2, [pc, #432]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 80047cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	e00b      	b.n	80047ec <HAL_RCC_OscConfig+0xb0>
 80047d4:	4b69      	ldr	r3, [pc, #420]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a68      	ldr	r2, [pc, #416]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 80047da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	4b66      	ldr	r3, [pc, #408]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a65      	ldr	r2, [pc, #404]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 80047e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d013      	beq.n	800481c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fe f89a 	bl	800292c <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047fc:	f7fe f896 	bl	800292c <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b64      	cmp	r3, #100	@ 0x64
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e207      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	4b5b      	ldr	r3, [pc, #364]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0xc0>
 800481a:	e014      	b.n	8004846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481c:	f7fe f886 	bl	800292c <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004824:	f7fe f882 	bl	800292c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b64      	cmp	r3, #100	@ 0x64
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e1f3      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004836:	4b51      	ldr	r3, [pc, #324]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0xe8>
 8004842:	e000      	b.n	8004846 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d063      	beq.n	800491a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004852:	4b4a      	ldr	r3, [pc, #296]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 030c 	and.w	r3, r3, #12
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00b      	beq.n	8004876 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800485e:	4b47      	ldr	r3, [pc, #284]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004866:	2b08      	cmp	r3, #8
 8004868:	d11c      	bne.n	80048a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800486a:	4b44      	ldr	r3, [pc, #272]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d116      	bne.n	80048a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004876:	4b41      	ldr	r3, [pc, #260]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <HAL_RCC_OscConfig+0x152>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d001      	beq.n	800488e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e1c7      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488e:	4b3b      	ldr	r3, [pc, #236]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4937      	ldr	r1, [pc, #220]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048a2:	e03a      	b.n	800491a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d020      	beq.n	80048ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048ac:	4b34      	ldr	r3, [pc, #208]	@ (8004980 <HAL_RCC_OscConfig+0x244>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b2:	f7fe f83b 	bl	800292c <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ba:	f7fe f837 	bl	800292c <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e1a8      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048cc:	4b2b      	ldr	r3, [pc, #172]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d8:	4b28      	ldr	r3, [pc, #160]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	4925      	ldr	r1, [pc, #148]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	600b      	str	r3, [r1, #0]
 80048ec:	e015      	b.n	800491a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ee:	4b24      	ldr	r3, [pc, #144]	@ (8004980 <HAL_RCC_OscConfig+0x244>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f4:	f7fe f81a 	bl	800292c <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048fc:	f7fe f816 	bl	800292c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e187      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490e:	4b1b      	ldr	r3, [pc, #108]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f0      	bne.n	80048fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d036      	beq.n	8004994 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d016      	beq.n	800495c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800492e:	4b15      	ldr	r3, [pc, #84]	@ (8004984 <HAL_RCC_OscConfig+0x248>)
 8004930:	2201      	movs	r2, #1
 8004932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004934:	f7fd fffa 	bl	800292c <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800493c:	f7fd fff6 	bl	800292c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e167      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494e:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <HAL_RCC_OscConfig+0x240>)
 8004950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x200>
 800495a:	e01b      	b.n	8004994 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800495c:	4b09      	ldr	r3, [pc, #36]	@ (8004984 <HAL_RCC_OscConfig+0x248>)
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004962:	f7fd ffe3 	bl	800292c <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004968:	e00e      	b.n	8004988 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800496a:	f7fd ffdf 	bl	800292c <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d907      	bls.n	8004988 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e150      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
 800497c:	40023800 	.word	0x40023800
 8004980:	42470000 	.word	0x42470000
 8004984:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004988:	4b88      	ldr	r3, [pc, #544]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 800498a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1ea      	bne.n	800496a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8097 	beq.w	8004ad0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a2:	2300      	movs	r3, #0
 80049a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a6:	4b81      	ldr	r3, [pc, #516]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10f      	bne.n	80049d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b2:	2300      	movs	r3, #0
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	4b7d      	ldr	r3, [pc, #500]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	4a7c      	ldr	r2, [pc, #496]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80049c2:	4b7a      	ldr	r3, [pc, #488]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ce:	2301      	movs	r3, #1
 80049d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d2:	4b77      	ldr	r3, [pc, #476]	@ (8004bb0 <HAL_RCC_OscConfig+0x474>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d118      	bne.n	8004a10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049de:	4b74      	ldr	r3, [pc, #464]	@ (8004bb0 <HAL_RCC_OscConfig+0x474>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a73      	ldr	r2, [pc, #460]	@ (8004bb0 <HAL_RCC_OscConfig+0x474>)
 80049e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ea:	f7fd ff9f 	bl	800292c <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f2:	f7fd ff9b 	bl	800292c <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e10c      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a04:	4b6a      	ldr	r3, [pc, #424]	@ (8004bb0 <HAL_RCC_OscConfig+0x474>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0f0      	beq.n	80049f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d106      	bne.n	8004a26 <HAL_RCC_OscConfig+0x2ea>
 8004a18:	4b64      	ldr	r3, [pc, #400]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1c:	4a63      	ldr	r2, [pc, #396]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004a1e:	f043 0301 	orr.w	r3, r3, #1
 8004a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a24:	e01c      	b.n	8004a60 <HAL_RCC_OscConfig+0x324>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	d10c      	bne.n	8004a48 <HAL_RCC_OscConfig+0x30c>
 8004a2e:	4b5f      	ldr	r3, [pc, #380]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a32:	4a5e      	ldr	r2, [pc, #376]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004a34:	f043 0304 	orr.w	r3, r3, #4
 8004a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a3a:	4b5c      	ldr	r3, [pc, #368]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3e:	4a5b      	ldr	r2, [pc, #364]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a46:	e00b      	b.n	8004a60 <HAL_RCC_OscConfig+0x324>
 8004a48:	4b58      	ldr	r3, [pc, #352]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4c:	4a57      	ldr	r2, [pc, #348]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a54:	4b55      	ldr	r3, [pc, #340]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a58:	4a54      	ldr	r2, [pc, #336]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004a5a:	f023 0304 	bic.w	r3, r3, #4
 8004a5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d015      	beq.n	8004a94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a68:	f7fd ff60 	bl	800292c <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6e:	e00a      	b.n	8004a86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a70:	f7fd ff5c 	bl	800292c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e0cb      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a86:	4b49      	ldr	r3, [pc, #292]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0ee      	beq.n	8004a70 <HAL_RCC_OscConfig+0x334>
 8004a92:	e014      	b.n	8004abe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a94:	f7fd ff4a 	bl	800292c <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a9a:	e00a      	b.n	8004ab2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9c:	f7fd ff46 	bl	800292c <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e0b5      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1ee      	bne.n	8004a9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d105      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac4:	4b39      	ldr	r3, [pc, #228]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac8:	4a38      	ldr	r2, [pc, #224]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004aca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ace:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80a1 	beq.w	8004c1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ada:	4b34      	ldr	r3, [pc, #208]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d05c      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d141      	bne.n	8004b72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aee:	4b31      	ldr	r3, [pc, #196]	@ (8004bb4 <HAL_RCC_OscConfig+0x478>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fd ff1a 	bl	800292c <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afc:	f7fd ff16 	bl	800292c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e087      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	4b27      	ldr	r3, [pc, #156]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69da      	ldr	r2, [r3, #28]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b28:	019b      	lsls	r3, r3, #6
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	3b01      	subs	r3, #1
 8004b34:	041b      	lsls	r3, r3, #16
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3c:	061b      	lsls	r3, r3, #24
 8004b3e:	491b      	ldr	r1, [pc, #108]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b44:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb4 <HAL_RCC_OscConfig+0x478>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4a:	f7fd feef 	bl	800292c <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b52:	f7fd feeb 	bl	800292c <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e05c      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b64:	4b11      	ldr	r3, [pc, #68]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x416>
 8004b70:	e054      	b.n	8004c1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b72:	4b10      	ldr	r3, [pc, #64]	@ (8004bb4 <HAL_RCC_OscConfig+0x478>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b78:	f7fd fed8 	bl	800292c <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b80:	f7fd fed4 	bl	800292c <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e045      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b92:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <HAL_RCC_OscConfig+0x470>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x444>
 8004b9e:	e03d      	b.n	8004c1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d107      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e038      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	40007000 	.word	0x40007000
 8004bb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c28 <HAL_RCC_OscConfig+0x4ec>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d028      	beq.n	8004c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d121      	bne.n	8004c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d11a      	bne.n	8004c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004be8:	4013      	ands	r3, r2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d111      	bne.n	8004c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	3b01      	subs	r3, #1
 8004c02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d107      	bne.n	8004c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800

08004c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0cc      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c40:	4b68      	ldr	r3, [pc, #416]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d90c      	bls.n	8004c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b65      	ldr	r3, [pc, #404]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b63      	ldr	r3, [pc, #396]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0b8      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c80:	4b59      	ldr	r3, [pc, #356]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4a58      	ldr	r2, [pc, #352]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c98:	4b53      	ldr	r3, [pc, #332]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4a52      	ldr	r2, [pc, #328]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca4:	4b50      	ldr	r3, [pc, #320]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	494d      	ldr	r1, [pc, #308]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d044      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	4b47      	ldr	r3, [pc, #284]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d119      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e07f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d003      	beq.n	8004cea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d107      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cea:	4b3f      	ldr	r3, [pc, #252]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e06f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e067      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0a:	4b37      	ldr	r3, [pc, #220]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f023 0203 	bic.w	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4934      	ldr	r1, [pc, #208]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d1c:	f7fd fe06 	bl	800292c <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d22:	e00a      	b.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d24:	f7fd fe02 	bl	800292c <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e04f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 020c 	and.w	r2, r3, #12
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d1eb      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d4c:	4b25      	ldr	r3, [pc, #148]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d20c      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5a:	4b22      	ldr	r3, [pc, #136]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b20      	ldr	r3, [pc, #128]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e032      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d80:	4b19      	ldr	r3, [pc, #100]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4916      	ldr	r1, [pc, #88]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d9e:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	490e      	ldr	r1, [pc, #56]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004db2:	f000 f821 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b0b      	ldr	r3, [pc, #44]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	490a      	ldr	r1, [pc, #40]	@ (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004dc4:	5ccb      	ldrb	r3, [r1, r3]
 8004dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dca:	4a09      	ldr	r2, [pc, #36]	@ (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004dce:	4b09      	ldr	r3, [pc, #36]	@ (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fd fd66 	bl	80028a4 <HAL_InitTick>

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40023c00 	.word	0x40023c00
 8004de8:	40023800 	.word	0x40023800
 8004dec:	08005fe4 	.word	0x08005fe4
 8004df0:	20000000 	.word	0x20000000
 8004df4:	20000004 	.word	0x20000004

08004df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dfc:	b094      	sub	sp, #80	@ 0x50
 8004dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e10:	4b79      	ldr	r3, [pc, #484]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 030c 	and.w	r3, r3, #12
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d00d      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x40>
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	f200 80e1 	bhi.w	8004fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <HAL_RCC_GetSysClockFreq+0x34>
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d003      	beq.n	8004e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e2a:	e0db      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e2c:	4b73      	ldr	r3, [pc, #460]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8004e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e30:	e0db      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e32:	4b73      	ldr	r3, [pc, #460]	@ (8005000 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e36:	e0d8      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e38:	4b6f      	ldr	r3, [pc, #444]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e42:	4b6d      	ldr	r3, [pc, #436]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d063      	beq.n	8004f16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	099b      	lsrs	r3, r3, #6
 8004e54:	2200      	movs	r2, #0
 8004e56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e62:	2300      	movs	r3, #0
 8004e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	462b      	mov	r3, r5
 8004e6e:	f04f 0000 	mov.w	r0, #0
 8004e72:	f04f 0100 	mov.w	r1, #0
 8004e76:	0159      	lsls	r1, r3, #5
 8004e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e7c:	0150      	lsls	r0, r2, #5
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4621      	mov	r1, r4
 8004e84:	1a51      	subs	r1, r2, r1
 8004e86:	6139      	str	r1, [r7, #16]
 8004e88:	4629      	mov	r1, r5
 8004e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e9c:	4659      	mov	r1, fp
 8004e9e:	018b      	lsls	r3, r1, #6
 8004ea0:	4651      	mov	r1, sl
 8004ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ea6:	4651      	mov	r1, sl
 8004ea8:	018a      	lsls	r2, r1, #6
 8004eaa:	4651      	mov	r1, sl
 8004eac:	ebb2 0801 	subs.w	r8, r2, r1
 8004eb0:	4659      	mov	r1, fp
 8004eb2:	eb63 0901 	sbc.w	r9, r3, r1
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eca:	4690      	mov	r8, r2
 8004ecc:	4699      	mov	r9, r3
 8004ece:	4623      	mov	r3, r4
 8004ed0:	eb18 0303 	adds.w	r3, r8, r3
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	462b      	mov	r3, r5
 8004ed8:	eb49 0303 	adc.w	r3, r9, r3
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	f04f 0300 	mov.w	r3, #0
 8004ee6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eea:	4629      	mov	r1, r5
 8004eec:	024b      	lsls	r3, r1, #9
 8004eee:	4621      	mov	r1, r4
 8004ef0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	024a      	lsls	r2, r1, #9
 8004ef8:	4610      	mov	r0, r2
 8004efa:	4619      	mov	r1, r3
 8004efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004efe:	2200      	movs	r2, #0
 8004f00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f08:	f7fb fe1a 	bl	8000b40 <__aeabi_uldivmod>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4613      	mov	r3, r2
 8004f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f14:	e058      	b.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f16:	4b38      	ldr	r3, [pc, #224]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	099b      	lsrs	r3, r3, #6
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	4611      	mov	r1, r2
 8004f22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f26:	623b      	str	r3, [r7, #32]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f30:	4642      	mov	r2, r8
 8004f32:	464b      	mov	r3, r9
 8004f34:	f04f 0000 	mov.w	r0, #0
 8004f38:	f04f 0100 	mov.w	r1, #0
 8004f3c:	0159      	lsls	r1, r3, #5
 8004f3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f42:	0150      	lsls	r0, r2, #5
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4641      	mov	r1, r8
 8004f4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f4e:	4649      	mov	r1, r9
 8004f50:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f68:	ebb2 040a 	subs.w	r4, r2, sl
 8004f6c:	eb63 050b 	sbc.w	r5, r3, fp
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	00eb      	lsls	r3, r5, #3
 8004f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f7e:	00e2      	lsls	r2, r4, #3
 8004f80:	4614      	mov	r4, r2
 8004f82:	461d      	mov	r5, r3
 8004f84:	4643      	mov	r3, r8
 8004f86:	18e3      	adds	r3, r4, r3
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	eb45 0303 	adc.w	r3, r5, r3
 8004f90:	607b      	str	r3, [r7, #4]
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	028b      	lsls	r3, r1, #10
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fa8:	4621      	mov	r1, r4
 8004faa:	028a      	lsls	r2, r1, #10
 8004fac:	4610      	mov	r0, r2
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	61fa      	str	r2, [r7, #28]
 8004fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fbc:	f7fb fdc0 	bl	8000b40 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	0c1b      	lsrs	r3, r3, #16
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004fd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fe2:	e002      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fe4:	4b05      	ldr	r3, [pc, #20]	@ (8004ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8004fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3750      	adds	r7, #80	@ 0x50
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	00f42400 	.word	0x00f42400
 8005000:	007a1200 	.word	0x007a1200

08005004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005008:	4b03      	ldr	r3, [pc, #12]	@ (8005018 <HAL_RCC_GetHCLKFreq+0x14>)
 800500a:	681b      	ldr	r3, [r3, #0]
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20000000 	.word	0x20000000

0800501c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005020:	f7ff fff0 	bl	8005004 <HAL_RCC_GetHCLKFreq>
 8005024:	4602      	mov	r2, r0
 8005026:	4b05      	ldr	r3, [pc, #20]	@ (800503c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	0a9b      	lsrs	r3, r3, #10
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	4903      	ldr	r1, [pc, #12]	@ (8005040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005032:	5ccb      	ldrb	r3, [r1, r3]
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40023800 	.word	0x40023800
 8005040:	08005ff4 	.word	0x08005ff4

08005044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e041      	b.n	80050da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fd face 	bl	800260c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3304      	adds	r3, #4
 8005080:	4619      	mov	r1, r3
 8005082:	4610      	mov	r0, r2
 8005084:	f000 fad8 	bl	8005638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e041      	b.n	8005178 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f839 	bl	8005180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3304      	adds	r3, #4
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f000 fa89 	bl	8005638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d109      	bne.n	80051b8 <HAL_TIM_PWM_Start+0x24>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	e022      	b.n	80051fe <HAL_TIM_PWM_Start+0x6a>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d109      	bne.n	80051d2 <HAL_TIM_PWM_Start+0x3e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	bf14      	ite	ne
 80051ca:	2301      	movne	r3, #1
 80051cc:	2300      	moveq	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	e015      	b.n	80051fe <HAL_TIM_PWM_Start+0x6a>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d109      	bne.n	80051ec <HAL_TIM_PWM_Start+0x58>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e008      	b.n	80051fe <HAL_TIM_PWM_Start+0x6a>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	bf14      	ite	ne
 80051f8:	2301      	movne	r3, #1
 80051fa:	2300      	moveq	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e07c      	b.n	8005300 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <HAL_TIM_PWM_Start+0x82>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005214:	e013      	b.n	800523e <HAL_TIM_PWM_Start+0xaa>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b04      	cmp	r3, #4
 800521a:	d104      	bne.n	8005226 <HAL_TIM_PWM_Start+0x92>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005224:	e00b      	b.n	800523e <HAL_TIM_PWM_Start+0xaa>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d104      	bne.n	8005236 <HAL_TIM_PWM_Start+0xa2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005234:	e003      	b.n	800523e <HAL_TIM_PWM_Start+0xaa>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2201      	movs	r2, #1
 8005244:	6839      	ldr	r1, [r7, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fce6 	bl	8005c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2d      	ldr	r2, [pc, #180]	@ (8005308 <HAL_TIM_PWM_Start+0x174>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <HAL_TIM_PWM_Start+0xcc>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a2c      	ldr	r2, [pc, #176]	@ (800530c <HAL_TIM_PWM_Start+0x178>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d101      	bne.n	8005264 <HAL_TIM_PWM_Start+0xd0>
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <HAL_TIM_PWM_Start+0xd2>
 8005264:	2300      	movs	r3, #0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005278:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a22      	ldr	r2, [pc, #136]	@ (8005308 <HAL_TIM_PWM_Start+0x174>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d022      	beq.n	80052ca <HAL_TIM_PWM_Start+0x136>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528c:	d01d      	beq.n	80052ca <HAL_TIM_PWM_Start+0x136>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1f      	ldr	r2, [pc, #124]	@ (8005310 <HAL_TIM_PWM_Start+0x17c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d018      	beq.n	80052ca <HAL_TIM_PWM_Start+0x136>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1d      	ldr	r2, [pc, #116]	@ (8005314 <HAL_TIM_PWM_Start+0x180>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_TIM_PWM_Start+0x136>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005318 <HAL_TIM_PWM_Start+0x184>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <HAL_TIM_PWM_Start+0x136>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a16      	ldr	r2, [pc, #88]	@ (800530c <HAL_TIM_PWM_Start+0x178>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_TIM_PWM_Start+0x136>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a18      	ldr	r2, [pc, #96]	@ (800531c <HAL_TIM_PWM_Start+0x188>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_TIM_PWM_Start+0x136>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a16      	ldr	r2, [pc, #88]	@ (8005320 <HAL_TIM_PWM_Start+0x18c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d111      	bne.n	80052ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b06      	cmp	r3, #6
 80052da:	d010      	beq.n	80052fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ec:	e007      	b.n	80052fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0201 	orr.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40010000 	.word	0x40010000
 800530c:	40010400 	.word	0x40010400
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40000c00 	.word	0x40000c00
 800531c:	40014000 	.word	0x40014000
 8005320:	40001800 	.word	0x40001800

08005324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800533e:	2302      	movs	r3, #2
 8005340:	e0ae      	b.n	80054a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b0c      	cmp	r3, #12
 800534e:	f200 809f 	bhi.w	8005490 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005352:	a201      	add	r2, pc, #4	@ (adr r2, 8005358 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	0800538d 	.word	0x0800538d
 800535c:	08005491 	.word	0x08005491
 8005360:	08005491 	.word	0x08005491
 8005364:	08005491 	.word	0x08005491
 8005368:	080053cd 	.word	0x080053cd
 800536c:	08005491 	.word	0x08005491
 8005370:	08005491 	.word	0x08005491
 8005374:	08005491 	.word	0x08005491
 8005378:	0800540f 	.word	0x0800540f
 800537c:	08005491 	.word	0x08005491
 8005380:	08005491 	.word	0x08005491
 8005384:	08005491 	.word	0x08005491
 8005388:	0800544f 	.word	0x0800544f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	4618      	mov	r0, r3
 8005394:	f000 f9f6 	bl	8005784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0208 	orr.w	r2, r2, #8
 80053a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0204 	bic.w	r2, r2, #4
 80053b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6999      	ldr	r1, [r3, #24]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	619a      	str	r2, [r3, #24]
      break;
 80053ca:	e064      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fa46 	bl	8005864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6999      	ldr	r1, [r3, #24]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	021a      	lsls	r2, r3, #8
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	619a      	str	r2, [r3, #24]
      break;
 800540c:	e043      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fa9b 	bl	8005950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0208 	orr.w	r2, r2, #8
 8005428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0204 	bic.w	r2, r2, #4
 8005438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69d9      	ldr	r1, [r3, #28]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	61da      	str	r2, [r3, #28]
      break;
 800544c:	e023      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	4618      	mov	r0, r3
 8005456:	f000 faef 	bl	8005a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69d9      	ldr	r1, [r3, #28]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	021a      	lsls	r2, r3, #8
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	61da      	str	r2, [r3, #28]
      break;
 800548e:	e002      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	75fb      	strb	r3, [r7, #23]
      break;
 8005494:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800549e:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIM_ConfigClockSource+0x1c>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e0b4      	b.n	800562e <HAL_TIM_ConfigClockSource+0x186>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054fc:	d03e      	beq.n	800557c <HAL_TIM_ConfigClockSource+0xd4>
 80054fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005502:	f200 8087 	bhi.w	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800550a:	f000 8086 	beq.w	800561a <HAL_TIM_ConfigClockSource+0x172>
 800550e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005512:	d87f      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b70      	cmp	r3, #112	@ 0x70
 8005516:	d01a      	beq.n	800554e <HAL_TIM_ConfigClockSource+0xa6>
 8005518:	2b70      	cmp	r3, #112	@ 0x70
 800551a:	d87b      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b60      	cmp	r3, #96	@ 0x60
 800551e:	d050      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005520:	2b60      	cmp	r3, #96	@ 0x60
 8005522:	d877      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005524:	2b50      	cmp	r3, #80	@ 0x50
 8005526:	d03c      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005528:	2b50      	cmp	r3, #80	@ 0x50
 800552a:	d873      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 800552c:	2b40      	cmp	r3, #64	@ 0x40
 800552e:	d058      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005530:	2b40      	cmp	r3, #64	@ 0x40
 8005532:	d86f      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005534:	2b30      	cmp	r3, #48	@ 0x30
 8005536:	d064      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 8005538:	2b30      	cmp	r3, #48	@ 0x30
 800553a:	d86b      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 800553c:	2b20      	cmp	r3, #32
 800553e:	d060      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 8005540:	2b20      	cmp	r3, #32
 8005542:	d867      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005544:	2b00      	cmp	r3, #0
 8005546:	d05c      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 8005548:	2b10      	cmp	r3, #16
 800554a:	d05a      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 800554c:	e062      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800555e:	f000 fb3b 	bl	8005bd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	609a      	str	r2, [r3, #8]
      break;
 800557a:	e04f      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800558c:	f000 fb24 	bl	8005bd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800559e:	609a      	str	r2, [r3, #8]
      break;
 80055a0:	e03c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 fa98 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2150      	movs	r1, #80	@ 0x50
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 faf1 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 80055c0:	e02c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ce:	461a      	mov	r2, r3
 80055d0:	f000 fab7 	bl	8005b42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2160      	movs	r1, #96	@ 0x60
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fae1 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 80055e0:	e01c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ee:	461a      	mov	r2, r3
 80055f0:	f000 fa78 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2140      	movs	r1, #64	@ 0x40
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fad1 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 8005600:	e00c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f000 fac8 	bl	8005ba2 <TIM_ITRx_SetConfig>
      break;
 8005612:	e003      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	e000      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800561a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a43      	ldr	r2, [pc, #268]	@ (8005758 <TIM_Base_SetConfig+0x120>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005656:	d00f      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a40      	ldr	r2, [pc, #256]	@ (800575c <TIM_Base_SetConfig+0x124>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00b      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a3f      	ldr	r2, [pc, #252]	@ (8005760 <TIM_Base_SetConfig+0x128>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d007      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a3e      	ldr	r2, [pc, #248]	@ (8005764 <TIM_Base_SetConfig+0x12c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a3d      	ldr	r2, [pc, #244]	@ (8005768 <TIM_Base_SetConfig+0x130>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d108      	bne.n	800568a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a32      	ldr	r2, [pc, #200]	@ (8005758 <TIM_Base_SetConfig+0x120>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d02b      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005698:	d027      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2f      	ldr	r2, [pc, #188]	@ (800575c <TIM_Base_SetConfig+0x124>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d023      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005760 <TIM_Base_SetConfig+0x128>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01f      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005764 <TIM_Base_SetConfig+0x12c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01b      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005768 <TIM_Base_SetConfig+0x130>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d017      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a2b      	ldr	r2, [pc, #172]	@ (800576c <TIM_Base_SetConfig+0x134>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005770 <TIM_Base_SetConfig+0x138>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00f      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a29      	ldr	r2, [pc, #164]	@ (8005774 <TIM_Base_SetConfig+0x13c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00b      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a28      	ldr	r2, [pc, #160]	@ (8005778 <TIM_Base_SetConfig+0x140>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d007      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a27      	ldr	r2, [pc, #156]	@ (800577c <TIM_Base_SetConfig+0x144>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a26      	ldr	r2, [pc, #152]	@ (8005780 <TIM_Base_SetConfig+0x148>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d108      	bne.n	80056fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a0e      	ldr	r2, [pc, #56]	@ (8005758 <TIM_Base_SetConfig+0x120>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d003      	beq.n	800572a <TIM_Base_SetConfig+0xf2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a10      	ldr	r2, [pc, #64]	@ (8005768 <TIM_Base_SetConfig+0x130>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d103      	bne.n	8005732 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f043 0204 	orr.w	r2, r3, #4
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	601a      	str	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40010400 	.word	0x40010400
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400
 8005774:	40014800 	.word	0x40014800
 8005778:	40001800 	.word	0x40001800
 800577c:	40001c00 	.word	0x40001c00
 8005780:	40002000 	.word	0x40002000

08005784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f023 0201 	bic.w	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0303 	bic.w	r3, r3, #3
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f023 0302 	bic.w	r3, r3, #2
 80057cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a20      	ldr	r2, [pc, #128]	@ (800585c <TIM_OC1_SetConfig+0xd8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_OC1_SetConfig+0x64>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005860 <TIM_OC1_SetConfig+0xdc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d10c      	bne.n	8005802 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0308 	bic.w	r3, r3, #8
 80057ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f023 0304 	bic.w	r3, r3, #4
 8005800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a15      	ldr	r2, [pc, #84]	@ (800585c <TIM_OC1_SetConfig+0xd8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_OC1_SetConfig+0x8e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a14      	ldr	r2, [pc, #80]	@ (8005860 <TIM_OC1_SetConfig+0xdc>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d111      	bne.n	8005836 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	621a      	str	r2, [r3, #32]
}
 8005850:	bf00      	nop
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	40010000 	.word	0x40010000
 8005860:	40010400 	.word	0x40010400

08005864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f023 0210 	bic.w	r2, r3, #16
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0320 	bic.w	r3, r3, #32
 80058ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a22      	ldr	r2, [pc, #136]	@ (8005948 <TIM_OC2_SetConfig+0xe4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_OC2_SetConfig+0x68>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a21      	ldr	r2, [pc, #132]	@ (800594c <TIM_OC2_SetConfig+0xe8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d10d      	bne.n	80058e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a17      	ldr	r2, [pc, #92]	@ (8005948 <TIM_OC2_SetConfig+0xe4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC2_SetConfig+0x94>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a16      	ldr	r2, [pc, #88]	@ (800594c <TIM_OC2_SetConfig+0xe8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d113      	bne.n	8005920 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40010000 	.word	0x40010000
 800594c:	40010400 	.word	0x40010400

08005950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0303 	bic.w	r3, r3, #3
 8005986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a21      	ldr	r2, [pc, #132]	@ (8005a30 <TIM_OC3_SetConfig+0xe0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_OC3_SetConfig+0x66>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a20      	ldr	r2, [pc, #128]	@ (8005a34 <TIM_OC3_SetConfig+0xe4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d10d      	bne.n	80059d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a16      	ldr	r2, [pc, #88]	@ (8005a30 <TIM_OC3_SetConfig+0xe0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_OC3_SetConfig+0x92>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a15      	ldr	r2, [pc, #84]	@ (8005a34 <TIM_OC3_SetConfig+0xe4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d113      	bne.n	8005a0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	621a      	str	r2, [r3, #32]
}
 8005a24:	bf00      	nop
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40010000 	.word	0x40010000
 8005a34:	40010400 	.word	0x40010400

08005a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	031b      	lsls	r3, r3, #12
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a12      	ldr	r2, [pc, #72]	@ (8005adc <TIM_OC4_SetConfig+0xa4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_OC4_SetConfig+0x68>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a11      	ldr	r2, [pc, #68]	@ (8005ae0 <TIM_OC4_SetConfig+0xa8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d109      	bne.n	8005ab4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	019b      	lsls	r3, r3, #6
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40010400 	.word	0x40010400

08005ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f023 0201 	bic.w	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f023 030a 	bic.w	r3, r3, #10
 8005b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b087      	sub	sp, #28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f023 0210 	bic.w	r2, r3, #16
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	031b      	lsls	r3, r3, #12
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f043 0307 	orr.w	r3, r3, #7
 8005bc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	609a      	str	r2, [r3, #8]
}
 8005bcc:	bf00      	nop
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	021a      	lsls	r2, r3, #8
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	609a      	str	r2, [r3, #8]
}
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a1a      	ldr	r2, [r3, #32]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1a      	ldr	r2, [r3, #32]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c50:	431a      	orrs	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e05a      	b.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a21      	ldr	r2, [pc, #132]	@ (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d022      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cc8:	d01d      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a1d      	ldr	r2, [pc, #116]	@ (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d018      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a1a      	ldr	r2, [pc, #104]	@ (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00e      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a18      	ldr	r2, [pc, #96]	@ (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a17      	ldr	r2, [pc, #92]	@ (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a15      	ldr	r2, [pc, #84]	@ (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d10c      	bne.n	8005d20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40000c00 	.word	0x40000c00
 8005d50:	40010400 	.word	0x40010400
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40001800 	.word	0x40001800

08005d5c <memset>:
 8005d5c:	4402      	add	r2, r0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d100      	bne.n	8005d66 <memset+0xa>
 8005d64:	4770      	bx	lr
 8005d66:	f803 1b01 	strb.w	r1, [r3], #1
 8005d6a:	e7f9      	b.n	8005d60 <memset+0x4>

08005d6c <__errno>:
 8005d6c:	4b01      	ldr	r3, [pc, #4]	@ (8005d74 <__errno+0x8>)
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	2000000c 	.word	0x2000000c

08005d78 <__libc_init_array>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005db0 <__libc_init_array+0x38>)
 8005d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8005db4 <__libc_init_array+0x3c>)
 8005d7e:	1b64      	subs	r4, r4, r5
 8005d80:	10a4      	asrs	r4, r4, #2
 8005d82:	2600      	movs	r6, #0
 8005d84:	42a6      	cmp	r6, r4
 8005d86:	d109      	bne.n	8005d9c <__libc_init_array+0x24>
 8005d88:	4d0b      	ldr	r5, [pc, #44]	@ (8005db8 <__libc_init_array+0x40>)
 8005d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8005dbc <__libc_init_array+0x44>)
 8005d8c:	f000 f91e 	bl	8005fcc <_init>
 8005d90:	1b64      	subs	r4, r4, r5
 8005d92:	10a4      	asrs	r4, r4, #2
 8005d94:	2600      	movs	r6, #0
 8005d96:	42a6      	cmp	r6, r4
 8005d98:	d105      	bne.n	8005da6 <__libc_init_array+0x2e>
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da0:	4798      	blx	r3
 8005da2:	3601      	adds	r6, #1
 8005da4:	e7ee      	b.n	8005d84 <__libc_init_array+0xc>
 8005da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005daa:	4798      	blx	r3
 8005dac:	3601      	adds	r6, #1
 8005dae:	e7f2      	b.n	8005d96 <__libc_init_array+0x1e>
 8005db0:	08006004 	.word	0x08006004
 8005db4:	08006004 	.word	0x08006004
 8005db8:	08006004 	.word	0x08006004
 8005dbc:	08006008 	.word	0x08006008

08005dc0 <sqrt>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	ed2d 8b02 	vpush	{d8}
 8005dc6:	ec55 4b10 	vmov	r4, r5, d0
 8005dca:	f000 f825 	bl	8005e18 <__ieee754_sqrt>
 8005dce:	4622      	mov	r2, r4
 8005dd0:	462b      	mov	r3, r5
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	eeb0 8a40 	vmov.f32	s16, s0
 8005dda:	eef0 8a60 	vmov.f32	s17, s1
 8005dde:	f7fa fe49 	bl	8000a74 <__aeabi_dcmpun>
 8005de2:	b990      	cbnz	r0, 8005e0a <sqrt+0x4a>
 8005de4:	2200      	movs	r2, #0
 8005de6:	2300      	movs	r3, #0
 8005de8:	4620      	mov	r0, r4
 8005dea:	4629      	mov	r1, r5
 8005dec:	f7fa fe1a 	bl	8000a24 <__aeabi_dcmplt>
 8005df0:	b158      	cbz	r0, 8005e0a <sqrt+0x4a>
 8005df2:	f7ff ffbb 	bl	8005d6c <__errno>
 8005df6:	2321      	movs	r3, #33	@ 0x21
 8005df8:	6003      	str	r3, [r0, #0]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	4610      	mov	r0, r2
 8005e00:	4619      	mov	r1, r3
 8005e02:	f7fa fcc7 	bl	8000794 <__aeabi_ddiv>
 8005e06:	ec41 0b18 	vmov	d8, r0, r1
 8005e0a:	eeb0 0a48 	vmov.f32	s0, s16
 8005e0e:	eef0 0a68 	vmov.f32	s1, s17
 8005e12:	ecbd 8b02 	vpop	{d8}
 8005e16:	bd38      	pop	{r3, r4, r5, pc}

08005e18 <__ieee754_sqrt>:
 8005e18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1c:	4a68      	ldr	r2, [pc, #416]	@ (8005fc0 <__ieee754_sqrt+0x1a8>)
 8005e1e:	ec55 4b10 	vmov	r4, r5, d0
 8005e22:	43aa      	bics	r2, r5
 8005e24:	462b      	mov	r3, r5
 8005e26:	4621      	mov	r1, r4
 8005e28:	d110      	bne.n	8005e4c <__ieee754_sqrt+0x34>
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	4629      	mov	r1, r5
 8005e30:	f7fa fb86 	bl	8000540 <__aeabi_dmul>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4620      	mov	r0, r4
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	f7fa f9ca 	bl	80001d4 <__adddf3>
 8005e40:	4604      	mov	r4, r0
 8005e42:	460d      	mov	r5, r1
 8005e44:	ec45 4b10 	vmov	d0, r4, r5
 8005e48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4c:	2d00      	cmp	r5, #0
 8005e4e:	dc0e      	bgt.n	8005e6e <__ieee754_sqrt+0x56>
 8005e50:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005e54:	4322      	orrs	r2, r4
 8005e56:	d0f5      	beq.n	8005e44 <__ieee754_sqrt+0x2c>
 8005e58:	b19d      	cbz	r5, 8005e82 <__ieee754_sqrt+0x6a>
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	4629      	mov	r1, r5
 8005e60:	f7fa f9b6 	bl	80001d0 <__aeabi_dsub>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	f7fa fc94 	bl	8000794 <__aeabi_ddiv>
 8005e6c:	e7e8      	b.n	8005e40 <__ieee754_sqrt+0x28>
 8005e6e:	152a      	asrs	r2, r5, #20
 8005e70:	d115      	bne.n	8005e9e <__ieee754_sqrt+0x86>
 8005e72:	2000      	movs	r0, #0
 8005e74:	e009      	b.n	8005e8a <__ieee754_sqrt+0x72>
 8005e76:	0acb      	lsrs	r3, r1, #11
 8005e78:	3a15      	subs	r2, #21
 8005e7a:	0549      	lsls	r1, r1, #21
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0fa      	beq.n	8005e76 <__ieee754_sqrt+0x5e>
 8005e80:	e7f7      	b.n	8005e72 <__ieee754_sqrt+0x5a>
 8005e82:	462a      	mov	r2, r5
 8005e84:	e7fa      	b.n	8005e7c <__ieee754_sqrt+0x64>
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	3001      	adds	r0, #1
 8005e8a:	02dc      	lsls	r4, r3, #11
 8005e8c:	d5fb      	bpl.n	8005e86 <__ieee754_sqrt+0x6e>
 8005e8e:	1e44      	subs	r4, r0, #1
 8005e90:	1b12      	subs	r2, r2, r4
 8005e92:	f1c0 0420 	rsb	r4, r0, #32
 8005e96:	fa21 f404 	lsr.w	r4, r1, r4
 8005e9a:	4323      	orrs	r3, r4
 8005e9c:	4081      	lsls	r1, r0
 8005e9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ea2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8005ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eaa:	07d2      	lsls	r2, r2, #31
 8005eac:	bf5c      	itt	pl
 8005eae:	005b      	lslpl	r3, r3, #1
 8005eb0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005eb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005eb8:	bf58      	it	pl
 8005eba:	0049      	lslpl	r1, r1, #1
 8005ebc:	2600      	movs	r6, #0
 8005ebe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8005ec2:	106d      	asrs	r5, r5, #1
 8005ec4:	0049      	lsls	r1, r1, #1
 8005ec6:	2016      	movs	r0, #22
 8005ec8:	4632      	mov	r2, r6
 8005eca:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005ece:	1917      	adds	r7, r2, r4
 8005ed0:	429f      	cmp	r7, r3
 8005ed2:	bfde      	ittt	le
 8005ed4:	193a      	addle	r2, r7, r4
 8005ed6:	1bdb      	suble	r3, r3, r7
 8005ed8:	1936      	addle	r6, r6, r4
 8005eda:	0fcf      	lsrs	r7, r1, #31
 8005edc:	3801      	subs	r0, #1
 8005ede:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8005ee2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005ee6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005eea:	d1f0      	bne.n	8005ece <__ieee754_sqrt+0xb6>
 8005eec:	4604      	mov	r4, r0
 8005eee:	2720      	movs	r7, #32
 8005ef0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	eb00 0e0c 	add.w	lr, r0, ip
 8005efa:	db02      	blt.n	8005f02 <__ieee754_sqrt+0xea>
 8005efc:	d113      	bne.n	8005f26 <__ieee754_sqrt+0x10e>
 8005efe:	458e      	cmp	lr, r1
 8005f00:	d811      	bhi.n	8005f26 <__ieee754_sqrt+0x10e>
 8005f02:	f1be 0f00 	cmp.w	lr, #0
 8005f06:	eb0e 000c 	add.w	r0, lr, ip
 8005f0a:	da42      	bge.n	8005f92 <__ieee754_sqrt+0x17a>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	db40      	blt.n	8005f92 <__ieee754_sqrt+0x17a>
 8005f10:	f102 0801 	add.w	r8, r2, #1
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	458e      	cmp	lr, r1
 8005f18:	bf88      	it	hi
 8005f1a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005f1e:	eba1 010e 	sub.w	r1, r1, lr
 8005f22:	4464      	add	r4, ip
 8005f24:	4642      	mov	r2, r8
 8005f26:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005f2a:	3f01      	subs	r7, #1
 8005f2c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005f30:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005f34:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005f38:	d1dc      	bne.n	8005ef4 <__ieee754_sqrt+0xdc>
 8005f3a:	4319      	orrs	r1, r3
 8005f3c:	d01b      	beq.n	8005f76 <__ieee754_sqrt+0x15e>
 8005f3e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8005fc4 <__ieee754_sqrt+0x1ac>
 8005f42:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8005fc8 <__ieee754_sqrt+0x1b0>
 8005f46:	e9da 0100 	ldrd	r0, r1, [sl]
 8005f4a:	e9db 2300 	ldrd	r2, r3, [fp]
 8005f4e:	f7fa f93f 	bl	80001d0 <__aeabi_dsub>
 8005f52:	e9da 8900 	ldrd	r8, r9, [sl]
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	f7fa fd6b 	bl	8000a38 <__aeabi_dcmple>
 8005f62:	b140      	cbz	r0, 8005f76 <__ieee754_sqrt+0x15e>
 8005f64:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005f68:	e9da 0100 	ldrd	r0, r1, [sl]
 8005f6c:	e9db 2300 	ldrd	r2, r3, [fp]
 8005f70:	d111      	bne.n	8005f96 <__ieee754_sqrt+0x17e>
 8005f72:	3601      	adds	r6, #1
 8005f74:	463c      	mov	r4, r7
 8005f76:	1072      	asrs	r2, r6, #1
 8005f78:	0863      	lsrs	r3, r4, #1
 8005f7a:	07f1      	lsls	r1, r6, #31
 8005f7c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005f80:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005f84:	bf48      	it	mi
 8005f86:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005f8a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8005f8e:	4618      	mov	r0, r3
 8005f90:	e756      	b.n	8005e40 <__ieee754_sqrt+0x28>
 8005f92:	4690      	mov	r8, r2
 8005f94:	e7be      	b.n	8005f14 <__ieee754_sqrt+0xfc>
 8005f96:	f7fa f91d 	bl	80001d4 <__adddf3>
 8005f9a:	e9da 8900 	ldrd	r8, r9, [sl]
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	4649      	mov	r1, r9
 8005fa6:	f7fa fd3d 	bl	8000a24 <__aeabi_dcmplt>
 8005faa:	b120      	cbz	r0, 8005fb6 <__ieee754_sqrt+0x19e>
 8005fac:	1ca0      	adds	r0, r4, #2
 8005fae:	bf08      	it	eq
 8005fb0:	3601      	addeq	r6, #1
 8005fb2:	3402      	adds	r4, #2
 8005fb4:	e7df      	b.n	8005f76 <__ieee754_sqrt+0x15e>
 8005fb6:	1c63      	adds	r3, r4, #1
 8005fb8:	f023 0401 	bic.w	r4, r3, #1
 8005fbc:	e7db      	b.n	8005f76 <__ieee754_sqrt+0x15e>
 8005fbe:	bf00      	nop
 8005fc0:	7ff00000 	.word	0x7ff00000
 8005fc4:	20000068 	.word	0x20000068
 8005fc8:	20000060 	.word	0x20000060

08005fcc <_init>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr

08005fd8 <_fini>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	bf00      	nop
 8005fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fde:	bc08      	pop	{r3}
 8005fe0:	469e      	mov	lr, r3
 8005fe2:	4770      	bx	lr
